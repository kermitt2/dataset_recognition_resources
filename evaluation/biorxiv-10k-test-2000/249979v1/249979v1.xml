<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.2d1 20170631//EN" "JATS-archivearticle1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" article-type="article" dtd-version="1.2d1" specific-use="production" xml:lang="en">
<front>
<journal-meta>
<journal-id journal-id-type="publisher-id">BIORXIV</journal-id>
<journal-title-group>
<journal-title>bioRxiv</journal-title>
<abbrev-journal-title abbrev-type="publisher">bioRxiv</abbrev-journal-title>
</journal-title-group>
<publisher>
<publisher-name>Cold Spring Harbor Laboratory</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="doi">10.1101/249979</article-id>
<article-version>1.1</article-version>
<article-categories>
<subj-group subj-group-type="author-type">
<subject>Regular Article</subject>
</subj-group>
<subj-group subj-group-type="heading">
<subject>New Results</subject>
</subj-group>
<subj-group subj-group-type="hwp-journal-coll">
<subject>Bioinformatics</subject>
</subj-group>
</article-categories>
<title-group>
<article-title>Experimental Directory Structure (Exdir): An alternative to HDF5 without introducing a new file format</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<name>
<surname>Dragly</surname>
<given-names>Svenn-Arne</given-names>
</name>
<xref ref-type="aff" rid="a1">1</xref>
<xref ref-type="aff" rid="a2">2</xref>
<xref ref-type="corresp" rid="cor1">&#x002A;</xref>
<xref ref-type="author-notes" rid="n1">&#x2020;</xref>
</contrib>
<contrib contrib-type="author" corresp="yes">
<name>
<surname>Mobarhan</surname>
<given-names>Milad Hobbi</given-names>
</name>
<xref ref-type="aff" rid="a1">1</xref>
<xref ref-type="aff" rid="a3">3</xref>
<xref ref-type="author-notes" rid="n1">&#x2020;</xref>
</contrib>
<contrib contrib-type="author" corresp="yes">
<name>
<surname>Lepper&#x00F8;d</surname>
<given-names>Mikkel</given-names>
</name>
<xref ref-type="aff" rid="a1">1</xref>
<xref ref-type="aff" rid="a5">5</xref>
<xref ref-type="author-notes" rid="n1">&#x2020;</xref>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Tenn&#x00F8;e</surname>
<given-names>Simen</given-names>
</name>
<xref ref-type="aff" rid="a1">1</xref>
<xref ref-type="aff" rid="a4">4</xref>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Fyhn</surname>
<given-names>Marianne</given-names>
</name>
<xref ref-type="aff" rid="a1">1</xref>
<xref ref-type="aff" rid="a3">3</xref>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Hafting</surname>
<given-names>Torkel</given-names>
</name>
<xref ref-type="aff" rid="a1">1</xref>
<xref ref-type="aff" rid="a5">5</xref>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Malthe-S&#x00F8;renssen</surname>
<given-names>Anders</given-names>
</name>
<xref ref-type="aff" rid="a1">1</xref>
<xref ref-type="aff" rid="a2">2</xref>
</contrib>
<aff id="a1"><label>1</label><institution>Centre for Integrative Neuroplasticity, University of Oslo</institution>, Oslo, <country>Norway</country></aff>
<aff id="a2"><label>2</label><institution>Department of Physics, University of Oslo</institution>, Oslo, <country>Norway</country></aff>
<aff id="a3"><label>3</label><institution>Department of Biosciences, University of Oslo</institution>, Oslo, <country>Norway</country></aff>
<aff id="a4"><label>4</label><institution>Department of Informatics, University of Oslo</institution>, Oslo, <country>Norway</country></aff>
<aff id="a5"><label>5</label><institution>Institute of Basic Medical Sciences, University of Oslo</institution>, Oslo, <country>Norway</country></aff>
</contrib-group>
<author-notes>
<fn id="n1" fn-type="equal"><label>&#x2020;</label><p>These authors have contributed equally to this work.</p></fn>
<corresp id="cor1"><label>&#x002A;</label>Correspondence: Svenn-Arne Dragly, P.O box 1048, Blindern, 0316 Oslo, Norway, <email>s.a.dragly@fys.uio.no</email></corresp>
</author-notes>
<pub-date pub-type="epub">
<year>2018</year>
</pub-date>
<elocation-id>249979</elocation-id>
<history>
<date date-type="received">
<day>18</day>
<month>1</month>
<year>2018</year>
</date>
<date date-type="rev-recd">
<day>18</day>
<month>1</month>
<year>2018</year>
</date>
<date date-type="accepted">
<day>18</day>
<month>1</month>
<year>2018</year>
</date>
</history>
<permissions>
<copyright-statement>&#x00A9; 2018, Posted by Cold Spring Harbor Laboratory</copyright-statement>
<copyright-year>2018</copyright-year>
<license license-type="creative-commons" xlink:href="http://creativecommons.org/licenses/by/4.0/"><license-p>This pre-print is available under a Creative Commons License (Attribution 4.0 International), CC BY 4.0, as described at <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link></license-p></license>
</permissions>
<self-uri xlink:href="249979.pdf" content-type="pdf" xlink:role="full-text"/>
<abstract>
<title>ABSTRACT</title>
<p>Natural sciences generate an increasing amount of data in a wide range of formats developed by different research groups and commercial companies. At the same time there is a growing desire to share data along with publications in order to enable reproducible research. Open formats have publicly available specifications which facilitate data sharing and reproducible research. Hierarchical Data Format 5 (HDF5) is a popular open format widely used in neuroscience, often as a foundation for other, more specialized formats. However, drawbacks related to HDF5&#x2019;s complex specification have initiated a discussion for an improved replacement. We propose a novel alternative, the Experimental Directory Structure (Exdir), an open standard for data storage in experimental pipelines which amends drawbacks associated with HDF5 while retaining its advantages. HDF5 stores data and metadata in a hierarchy within a complex binary file which, among other things, is not human-readable, not optimal for version control systems, and lacks support for storing raw data. Exdir, one the other hand, uses file system directories to represent the hierarchy, with metadata stored in human-readable YAML files, datasets stored in binary NumPy files, and raw data stored directly in subdirectories. Furthermore, storing data in multiple files makes it easier to track for version control systems. Exdir is not a file format in itself, but a standard for organizing files in a directory structure. Exdir uses the same abstractions as HDF5 and is compatible with the HDF5 Abstract Data Model. Several research groups are already using data stored in a directory hierarchy as an alternative to HDF5, but no common standard exists in the field. This complicates and limits the opportunity for data sharing and development of common tools for reading, writing, and analyzing data. Exdir facilitates improved data storage, data sharing, reproducible research, and novel insight from interdisciplinary collaboration. With the publication of Exdir, we invite the scientific community to join the development to create an open standard that will serve as many needs as possible and that will serve as a foundation for open access to and exchange of data.</p>
<sec id="s1">
<title>SIGNIFICANCE STATEMENT</title>
<p>Experimental Directory Structure (Exdir) is a proposal to standardize a storage solution that has become an increasingly popular alternative to Hierarchical Data Format 5 (HDF5), namely to use directories to define a hierarchy, store data in binary files, and metadata in text files. While this strategy is deployed locally by several research groups, no common standard exists. We envision the establishment of such a standard and present Exdir to the community as a starting point.</p>
</sec>
</abstract>
<kwd-group kwd-group-type="author">
<title>Keywords</title>
<kwd>file format</kwd>
<kwd>data storage</kwd>
<kwd>data management</kwd>
<kwd>analysis</kwd>
<kwd>Python</kwd>
</kwd-group>
<counts>
<page-count count="20"/>
</counts>
</article-meta>
</front>
<body>
<sec id="s2">
<label>1</label>
<title>INTRODUCTION</title>
<p>Technology development is continuously driving science to new discoveries. In neuroscience, advancements in genetic tools, recording technology, and computer power have paved the avenue to reveal the underlyings of the healthy and diseased brain. Modern neuroscience usually involves recordings and perturbation at many levels, generating a range of data including imaging, electrophysiology, behaviors, perturbations, and molecular biology. Publication of raw data is acknowledged as critical to enable reproducible research and global large-scale collaborative projects and metadata analyses (<xref rid="c7" ref-type="bibr">Nelson, 2009</xref>). However, data from different acquisition systems come in a multitude of data formats that need to be readable for all relevant analysis software and stored for long-term archival. Acquisition systems often use proprietary and specialized formats tailored to data produced by specific types of equipment or software. However, these specialized formats have little applicability outside their intended purpose, making them inaccessible for extended use. In contrast, general-purpose formats can store data for multiple types of equipment and software. When based on open standards, general-purpose formats facilitate data sharing.</p>
<p>Hierarchical Data Format 5 (HDF5)<sup><xref ref-type="fn" rid="fn1">1</xref></sup> is a popular and open general-purpose format capable of storing many large and annotated datasets in a hierarchical structure within a single file. HDF5 is the basis of many formats in neuroscience, including the recent collaborative format, Neurodata Without Borders (NWB) (<xref rid="c14" ref-type="bibr">Teeters et al., 2015</xref>). However, issues with HDF5 have recently surfaced in the neuroscience community (<xref rid="c9" ref-type="bibr">Rossant, 2016b</xref>). Many of these are due to the complex standard of HDF5 and its use of a single binary file to store all the data. The metadata is not human-readable and the binary format is not optimal for version control systems. Further, the use of a single file increases the severity of data corruption, because corruption in a single dataset can affect the entire file. In addition to this, there is no support for storing raw data in other file formats within the HDF5 hierarchy. These issues have sparked a discussion in the wider scientific community on whether HDF5 should be replaced by alternative data formats or if its large feature set outweighs the disadvantages (<xref rid="c5" ref-type="bibr">Hinsen, 2016</xref>).</p>
<p>Here, we propose a novel standard, Experimental Directory Structure (Exdir) as an alternative that circumvents the drawbacks of HDF5 and takes advantage of existing, open data formats. Exdir follows the abstract data model used in HDF5<sup><xref ref-type="fn" rid="fn2">2</xref></sup>, but stores data and metadata in directories to avoid the vulnerability and rigidity associated with storing all data in a single file. Datasets are stored in binary NumPy<sup><xref ref-type="fn" rid="fn3">3</xref></sup> files, while attributes and metadata are stored in YAML<sup><xref ref-type="fn" rid="fn4">4</xref></sup> text files. Raw data, such as images and time series obtained during data acquisition, can also be stored in Exdir alongside the binary NumPy files. This allows raw data to be organized inside an Exdir hierarchy without any prior conversion, even when the data is composed of multiple formats.</p>
<p>Exdir is ready to use with a reference implementation in Python, a command-line client, and a graphical browser. The application programming interface (API) of the reference implementation is compatible with h5py<sup><xref ref-type="fn" rid="fn5">5</xref></sup>, a popular HDF5 library for Python. The code is open source and hosted on GitHub<sup><xref ref-type="fn" rid="fn6">6</xref></sup>.</p>
<p>The idea of an HDF5-replacement based on a hierarchy of directories is already present in the scientific community (<xref rid="c8" ref-type="bibr">Rossant, 2016a</xref>), but to the best of our knowledge no formal standard has been introduced. The lack of a standard reduces the opportunities for collaboration through data sharing, and inhibits development of analysis tools. Exdir represents the introduction of a standard that enables novel insight from interdisciplinary collaboration by facilitating reproducible research through improved data storage and sharing. With the publication of Exdir, we invite the scientific community to join the development to create an open standard that will serve as many needs as possible.</p>
</sec>
<sec id="s3">
<label>2</label>
<title>EXISTING ALTERNATIVES</title>
<sec id="s3a">
<label>2.1</label>
<title>Hierarchical Data Format (HDF5)</title>
<p>HDF5 holds many advantages over alternative data formats, but as described by <xref rid="c3" ref-type="bibr">Greenfield et al. (2015</xref>), the HDF5 format also has crucial disadvantages. In the list below, we have summarized the limitations and challenges from <xref rid="c3" ref-type="bibr">Greenfield et al. (2015</xref>) that are most relevant to neuroscience along with some additional drawbacks which are addressed with Exdir:</p>
<list list-type="order">
<list-item>
<p>Metadata is stored in a binary format which makes it unreadable without tools that read HDF5 files. This also makes the metadata unavailable for text-based command line tools.</p>
</list-item>
<list-item>
<p>The specification for HDF5 files is large and complex and there is only one defacto implementation of HDF5 in C that most HDF5-libraries use. Because of the complex specification, this implementation is hard to improve by external contributors. Furthermore, the dependency on one large implementation makes it hard to write software which reads and writes HDF5 files in ways that have not been anticipated by the implementation developers.</p>
</list-item>
<list-item>
<p>Like all data formats, HDF5 files are susceptible to data corruption. However, because HDF5 stores all data and metadata in a single file, data corruption in one part of an HDF5 file has a chance of corrupting the entire file.</p>
</list-item>
<list-item>
<p>Attributes in HDF5 do not support deeply nested structures, like JSON data, YAML data or Python dictionaries.</p>
</list-item>
<list-item>
<p>External version control systems such as Git<sup><xref ref-type="fn" rid="fn7">7</xref></sup> and incremental backup systems do not work optimally with HDF5 files because all datasets and metadata are stored in a single binary file. This makes it appear as if the entire file has changed when changes are made to a single dataset.</p>
</list-item>
<list-item>
<p>Comparing files in binary formats like HDF5 requires specialized tools. However, text-based formats have a wide range of tools that allow line-by-line comparisons, such as <italic>diff</italic><sup><xref ref-type="fn" rid="fn8">8</xref></sup>, and <italic>wdiff</italic><sup><xref ref-type="fn" rid="fn9">9</xref></sup>, or the graphical tools <italic>meld</italic><sup><xref ref-type="fn" rid="fn10">10</xref></sup> and <italic>kdiff3</italic>.<sup><xref ref-type="fn" rid="fn11">11</xref></sup>.</p>
</list-item>
<list-item>
<p>Deleting datasets in HDF5 files only removes a reference to the data, while the data remains on disk.</p>
</list-item>
<list-item>
<p>Raw data from acquisition or analysis must be stored outside the HDF5 file which makes the raw data detached from the internal hierarchy and inconvenient to annotate. It is often necessary to organize raw data in a separate hierarchy outside the HDF5 file.</p>
</list-item>
</list>
</sec>
<sec id="s3b">
<label>2.2</label>
<title>Advanced Scientific Data Format (ASDF)</title>
<p><xref rid="c3" ref-type="bibr">Greenfield et al. (2015</xref>) propose a new format (Advanced Scientific Data Format, ASDF) to address many of the above mentioned problems. Similar to Exdir, ASDF also embraces YAML for metadata, but it also stores and organizes binary data in the same YAML file. Storing the data in one file has the same increased risk of data corruption as HDF5 and makes it harder for version control systems to keep track of incremental changes. Furthermore, like HDF5, ASDF does not provide a convenient way to store raw data in the internal hierarchy.</p>
</sec>
<sec id="s3c">
<label>2.3</label>
<title>Commonly used open formats in neuroscience</title>
<p>In <xref rid="tbl1" ref-type="table">Table 1</xref>, some of the commonly used open formats in neuroscience are listed. Some of these formats are discussed by <xref rid="c14" ref-type="bibr">Teeters et al. (2015</xref>) where they also introduce Neurodata Without Borders (NWB), a format recently developed in an attempt to unify cellular-based neurophysiology data and break down barriers for data sharing. Many of these formats, including NWB, are based on HDF5 and therefore share the same advantages and disadvantages as HDF5. Because Exdir is compatible with the abstract data model of HDF5, these formats could be moved to being based on Exdir in the future. The formats that are not based on HDF5 are mostly specialized to neuroscience and therefore have limited applicability to the wider scientific community.</p>
<table-wrap id="tbl1" position="float" orientation="portrait">
<label>Table 1.</label>
<caption><p>Overview of commonly used open formats in neuroscience.</p></caption>
<graphic xlink:href="249979_tbl1.tif"/>
</table-wrap>
</sec>
<sec id="s3d">
<label>2.4</label>
<title>Requirements of a new data format</title>
<p>We share many of the requirements reviewed in detail by <xref rid="c3" ref-type="bibr">Greenfield et al. (2015</xref>) for the ASDF format. To meet the challenges, a data format should:</p>
<list list-type="order">
<list-item>
<p>Have an intrinsic hierarchical structure.</p>
</list-item>
<list-item>
<p>Be human-readable.</p>
</list-item>
<list-item>
<p>Be based on existing standards.</p>
</list-item>
<list-item>
<p>Be easy to extend.</p>
</list-item>
<list-item>
<p>Have efficient mechanisms to update data.</p>
</list-item>
<list-item>
<p>Have support for both text and binary data.</p>
<p>In addition to the above mentioned requirements, we want Exdir to:</p>
</list-item>
<list-item>
<p>Minimize the risks and consequences of data corruption.</p>
</list-item>
<list-item>
<p>Have a simple, yet flexible specification.</p>
</list-item>
<list-item>
<p>Be flexible to data modifications.</p>
</list-item>
<list-item>
<p>Be easy to use in ways that have not been anticipated by the authors.</p>
</list-item>
<list-item>
<p>Be based on the same abstractions as HDF5 to make it easy to port HDF5-based solutions.</p>
</list-item>
<list-item>
<p>Provide a convenient way to store raw data in the same hierarchy.</p>
</list-item>
</list>
<p>None of the existing formats known to the authors fulfill all of the mentioned requirements.</p>
</sec>
</sec>
<sec id="s4">
<label>3</label>
<title>STANDARDS USED IN EXDIR</title>
<p>To fulfill the requirements stated in <xref rid="s3d" ref-type="sec">Section 2.4</xref>, we propose a new standard, Exdir, which is based on a standardized directory structure and established open-source file formats. The structure follows the abstract data model used in HDF5, but Exdir uses regular file system directories to define the object hierarchy, and stores datasets, attributes, and corresponding metadata in separate files.</p>
<p>We use YAML to store metadata and attributes. YAML is a human-readable format and has the ability to store many types of objects, provided software to convert the object to and from YAML. Furthermore, libraries for YAML support exist for most major programming languages, including Python, C/C&#x002B;&#x002B;, Java, and Rust<sup><xref ref-type="fn" rid="fn14">14</xref></sup>.</p>
<p>To store binary data we have chosen the NumPy format. This is a simple, efficient, and widely used file format. Furthermore, there exist libraries to load NumPy files in several languages such as Matlab<sup><xref ref-type="fn" rid="fn15">15</xref></sup>, Rust<sup><xref ref-type="fn" rid="fn16">16</xref></sup>, R<sup><xref ref-type="fn" rid="fn17">17</xref></sup>, and C/C&#x002B;&#x002B;<sup><xref ref-type="fn" rid="fn18">18</xref></sup>.</p>
<p>The hierarchical structure of Exdir benefits from the hierarchy of directories in file systems. It is an existing standard which is familiar to computer users. By using this inherent hierarchy, Exdir makes it possible for a user to browse any Exdir object with a native file explorer. Further, the use of regular directories allows raw data from acquisition to be stored in the same hierarchy and annotated together with the rest of the data.</p>
<p>Parallel reading and writing to different objects in an Exdir directory is handled by the operating system. This is in contrast to HDF5, where parallel read/write operations must be handled by the HDF5 library because all datasets are stored in the same file. Parallel read/write operations to the same dataset is currently not supported in the reference implementation of Exdir, but is planned for a future release or extension.</p>
<p>As each dataset is stored in its own directory, the risk of data corruption is reduced. If one dataset is corrupted, it is unlikely to affect the other files in a directory. This separation also makes Exdir avoid the problem of data remaining after deletion in HDF5 and taking up space. Deleting a dataset in Exdir immediately frees up disk space.</p>
<p>When accessing large Exdir <monospace>File</monospace> objects, one can easily retrieve and share subtrees of the main hierarchy by copying the corresponding directories. This reduces memory, CPU, and server-communication costs by keeping the size of data handled to a minimum. When sharing Exdir data with others, one can use readily available compression file formats such as <monospace>.zip</monospace> or <monospace>.tar.gz</monospace>.</p>
<p>Instead of building data consistency verification into Exdir, we envision the use of existing tools for this purpose. For instance, plugins (see <xref rid="s6b" ref-type="sec">section 5.2</xref>) can be developed to make version control systems like Git track the version of each object in an Exdir directory and ensure that no files have changed independently. This also allows Exdir to be combined with Git-based systems like Gin<sup><xref ref-type="fn" rid="fn19">19</xref></sup>, which are tailored towards cloud-based handling of large datasets (<xref rid="c1" ref-type="bibr">Garbers et al., 2017</xref>).</p>
</sec>
<sec id="s5">
<label>4</label>
<title>BASIC STRUCTURE OF EXDIR DIRECTORIES</title>
<p>Exdir has four types of objects, <monospace>File</monospace>, <monospace>Group</monospace>, <monospace>Dataset</monospace>, and <monospace>Raw</monospace>, where each is represented as a directory in the file system. <monospace>Raw</monospace> is a type of object that is not present in the original HDF5 abstract data model. Metadata for each of these objects is stored in a file named <monospace>exdir.yaml</monospace>.</p>
<p>All objects can have attributes stored in an optional file named <monospace>attributes.yaml</monospace>. <xref rid="fig1" ref-type="fig">Figure 1</xref> shows an example structure of an Exdir <monospace>File</monospace>, and a summary of specifications of the data format is shown in <xref rid="tbl2" ref-type="table">Table 2</xref>.</p>
<fig id="fig1" position="float" orientation="portrait" fig-type="figure">
<label>Figure 1.</label>
<caption><title>Overview of an example Exdir directory.</title>
<p><monospace>File, Group</monospace>, and <monospace>Dataset</monospace> refer to objects in Exdir, and are stored as directories in the file system. These objects are equivalent to the same objects in the HDF5 abstract data model. <monospace>Raw</monospace> is specific to Exdir and is a regular directory containing arbitrary data files. Inside each directory, there is a file named <monospace>exdir.yaml</monospace> with information about the object type and Exdir version. Each object may contain an <monospace>attributes.yaml</monospace> file containing user-defined attributes. Inside the <monospace>Dataset</monospace> directory is a file named <monospace>data.npy</monospace> that contains the data of the dataset stored in the NumPy binary format.</p></caption>
<graphic xlink:href="249979_fig1.tif"/>
</fig>
<table-wrap id="tbl2" position="float" orientation="portrait">
<label>Table 2.</label>
<caption><p>Exdir format structure.</p></caption>
<graphic xlink:href="249979_tbl2.tif"/>
</table-wrap>
<sec id="s5a">
<label>4.1</label>
<title>Metadata, attributes, and data files</title>
<p>Metadata for each object is stored in the <monospace>exdir.yaml</monospace> file in the object&#x2019;s directory. This file defines that the current directory is an Exdir object, and contains information about the Exdir version and object type. For example, this is the <monospace>exdir.yaml</monospace> file of a dataset:</p>
<preformat>exdir :
    version : 1
    type: dataset</preformat>
<p>The object type can either be <monospace>file</monospace>, <monospace>group</monospace>, <monospace>dataset</monospace>, or <monospace>raw</monospace>. The <monospace>exdir.yaml</monospace> file is optional for <monospace>Raw</monospace> objects.</p>
<p>User-defined attributes of an Exdir object are stored in that object&#x2019;s directory in the <monospace>attributes.yaml</monospace> file. Attributes are stored as key&#x2013;value pairs, which can be nested:</p>
<preformat>location :
    room: 123
    building : A
creator : James
equipment : &#x2026;</preformat>
<p>Binary data of a <monospace>Dataset</monospace> is stored in the NumPy format<sup><xref ref-type="fn" rid="fn20">20</xref></sup> in a file named <monospace>data.npy</monospace> in the <monospace>Dataset</monospace> object&#x2019;s directory.</p>
</sec>
<sec id="s5b">
<label>4.2</label>
<title>File</title>
<p>The <monospace>File</monospace> object is the root (top level) object of an Exdir hierarchy. Every directory below a <monospace>File</monospace> in the directory hierarchy is part of that <monospace>File</monospace>. A <monospace>File</monospace> cannot contain other <monospace>File</monospace> objects. The metadata of the <monospace>File</monospace> is stored in <monospace>exdir.yaml</monospace>, and optional attributes in <monospace>attributes.yaml</monospace>.</p>
</sec>
<sec id="s5c">
<label>4.3</label>
<title>Group</title>
<p>Inside the <monospace>File</monospace>, multiple objects may be stored, among them <monospace>Group</monospace> objects. <monospace>Group</monospace> objects may also contain any number of other <monospace>Group</monospace> objects, <monospace>Raw</monospace> objects, and <monospace>Dataset</monospace> objects. <monospace>Group</monospace> objects are stored as directories in the file system with metadata stored in <monospace>exdir.yaml</monospace>, and optional attributes in <monospace>attributes.yaml</monospace>. File objects are a specialization of a <monospace>Group</monospace> object.</p>
</sec>
<sec id="s5e">
<label>4.4</label>
<title>Dataset</title>
<p><monospace>Dataset</monospace> objects are for storing data. <monospace>Dataset</monospace> objects are stored as directories with metadata in the <monospace>exdir.yaml</monospace> file, and user-defined attributes in an optional <monospace>attributes.yaml</monospace> file. The data within a <monospace>Dataset</monospace> is stored in a binary NumPy file named <monospace>data.npy</monospace>.</p>
</sec>
<sec id="s5f">
<label>4.5</label>
<title>Raw</title>
<p><monospace>Raw</monospace> objects are used to store data in other formats than the NumPy format. While the user may store any type of data in the a <monospace>Raw</monospace> directory it is encouraged to use <monospace>Dataset</monospace> objects if possible. For <monospace>Raw</monospace> directories the <monospace>exdir.yaml</monospace> file is optional. Further, attributes are stored in the optional <monospace>attributes.yaml</monospace> file. There is no similar concept of <monospace>Raw</monospace> objects in HDF5.</p>
</sec>
</sec>
<sec id="s6">
<label>5</label>
<title>REFERENCE IMPLEMENTATION IN PYTHON</title>
<p>We have created a reference implementation of the Exdir standard in Python. This implementation is hosted on Github and is publicly available with an open-source license. It can easily be installed with Anaconda<sup><xref ref-type="fn" rid="fn21">21</xref></sup>.</p>
<p>The reference implementation of Exdir owes its relative simplicity to being based on existing formats, and to having a hierarchy based on regular file system directories. It is implemented using the open-source NumPy and PyYAML<sup><xref ref-type="fn" rid="fn22">22</xref></sup> libraries, and is designed to be compatible with the popular HDF5 library, h5py. The compatibility should ease the transition from h5py to Exdir.</p>
<p>The class hierarchy of the reference implementation is shown in <xref rid="fig2" ref-type="fig">Figure 2</xref>. The <monospace>Raw, Group</monospace>, and <monospace>Dataset</monospace> classes inherit from <monospace>Object</monospace>, which contains their common methods. The <monospace>File</monospace> class is a subclass of <monospace>Group</monospace> and they share many of the same methods. <monospace>Attribute</monospace> is a separate class that handles attributes for all Exdir objects. Furthermore, the reference implementation has an extensive test suite that can be run with <monospace>pytest</monospace><sup><xref ref-type="fn" rid="fn23">23</xref></sup>.</p>
<fig id="fig2" position="float" orientation="portrait" fig-type="figure">
<label>Figure 2.</label>
<caption><title>Exdir reference implementation class hierarchy.</title></caption>
<graphic xlink:href="249979_fig2.tif"/>
</fig>
<sec id="s6a">
<label>5.1</label>
<title>Overview of the Exdir API in Python</title>
<p>In this section we give a quick overview of the Exdir Python API. An Exdir <monospace>File</monospace> is created as follows:</p>
<fig id="ufig3" position="float" orientation="portrait" fig-type="figure">
<graphic xlink:href="249979_ufig3.tif"/>
</fig>
<p>The <monospace>File</monospace> object points to the root directory in the Exdir directory structure. To create a <monospace>Dataset</monospace> inside the root directory (or other <monospace>Group</monospace> objects) the <monospace>create_dataset()</monospace> method can be used:</p>
<fig id="ufig4" position="float" orientation="portrait" fig-type="figure">
<graphic xlink:href="249979_ufig4.tif"/>
</fig>
<p>Exdir <monospace>Dataset</monospace> objects are not NumPy arrays, but behave similarly. They have both a shape and a data type:</p>
<fig id="ufig5" position="float" orientation="portrait" fig-type="figure">
<graphic xlink:href="249979_ufig5.tif"/>
</fig>
<p><monospace>Dataset</monospace> objects support array-style slicing, which can be used to read and write data to the <monospace>Dataset</monospace>:</p>
<fig id="ufig6" position="float" orientation="portrait" fig-type="figure">
<graphic xlink:href="249979_ufig6.tif"/>
</fig>
<p>In addition, <monospace>Dataset</monospace> objects can also be created from the data directly:</p>
<fig id="ufig7" position="float" orientation="portrait" fig-type="figure">
<graphic xlink:href="249979_ufig7.tif"/>
</fig>
<p>Exdir uses NumPy&#x2019;s memory mapping feature (memmap) to access segments of larger datasets on disk, without reading the entire file into memory. Furthermore, Exdir supports all the operations supported by memmap, including fancy indexing:</p>
<preformat>&#x003E;&#x003E;&#x003E; dset[dset [:] &#x003E; 90]
array([91 , 92, 93, 94, 95, 96, 97, 98, 99] , dtype&#x003D;int32)</preformat>
<p>An Exdir <monospace>Group</monospace> can be created using <monospace>create_group()</monospace>:</p>
<fig id="ufig9" position="float" orientation="portrait" fig-type="figure">
<graphic xlink:href="249979_ufig9.tif"/>
</fig>
<p>As with <monospace>File</monospace> objects, a <monospace>Dataset</monospace> is created inside a <monospace>Group</monospace> by using the <monospace>create_dataset()</monospace> method:</p>
<fig id="ufig10" position="float" orientation="portrait" fig-type="figure">
<graphic xlink:href="249979_ufig10.tif"/>
</fig>
<p><monospace>Group</monospace> objects support most of the Python dictionary-style interface. You retrieve objects in the file using the item-retrieval syntax:</p>
<fig id="ufig11" position="float" orientation="portrait" fig-type="figure">
<graphic xlink:href="249979_ufig11.tif"/>
</fig>
<p>As shown above the name of objects follows the hierarchy of the POSIX standard with /-separators. To retrieve the name of any object in an Exdir directory one can use:</p>
<fig id="ufig12" position="float" orientation="portrait" fig-type="figure">
<graphic xlink:href="249979_ufig12.tif"/>
</fig>
<p>Iterating over a <monospace>File</monospace> or a <monospace>Group</monospace> provides the names of their members:</p>
<fig id="ufig13" position="float" orientation="portrait" fig-type="figure">
<graphic xlink:href="249979_ufig13.tif"/>
</fig>
<p>Containership testing also uses names:</p>
<fig id="ufig14" position="float" orientation="portrait" fig-type="figure">
<graphic xlink:href="249979_ufig14.tif"/>
</fig>
<p><monospace>Group</monospace> objects have the methods: <monospace>keys(), values(), items(), iter()</monospace>, and <monospace>get()</monospace>.</p>
<p>All <monospace>File</monospace> objects, <monospace>Group</monospace> objects, and <monospace>Dataset</monospace> objects can have attributes. Attributes are accessed through the <monospace>attrs</monospace> property, which implements a dictionary interface:</p>
<fig id="ufig15" position="float" orientation="portrait" fig-type="figure">
<graphic xlink:href="249979_ufig15.tif"/>
</fig>
<p>Unlike HDF5 and h5py, Exdir supports dictionaries as attributes:</p>
<fig id="ufig16" position="float" orientation="portrait" fig-type="figure">
<graphic xlink:href="249979_ufig16.tif"/>
</fig>
<p>After the above commands, the Exdir directory structure becomes:</p>
<fig id="ufig17" position="float" orientation="portrait" fig-type="figure">
<graphic xlink:href="249979_ufig17.tif"/>
</fig>
</sec>
<sec id="s6b">
<label>5.2</label>
<title>Exdir Plugins</title>
<p>The functionality of Exdir can be extended with plugins. These allow modifying the behavior of Exdir when enabled. For instance, dataset and attribute plugins can perform pre- and post-processing of data during reading and writing operations. Some plugins are provided in the <monospace>exdir.plugins</monospace> module, while new plugins can be defined by Exdir users or package developers.</p>
<p>One of the built-in plugins provides experimental support for units using the <monospace>quantities</monospace> package<sup><xref ref-type="fn" rid="fn24">24</xref></sup>:</p>
<fig id="ufig18" position="float" orientation="portrait" fig-type="figure">
<graphic xlink:href="249979_ufig18.tif"/>
</fig>
<p>As shown in the above example, a plugin is enabled when creating a <monospace>File</monospace> object by passing the <monospace>plugin</monospace> to the plugin argument.</p>
<p>To create a custom plugin, one of the handler classes in <monospace>exdir.plugin_interface</monospace> must be inherited. The abstract handler classes are named after the object type you want to create a handler for. The following is an example of a <monospace>Dataset</monospace> handler that multiplies the numbers in the <monospace>Dataset</monospace> by 2 whenever the <monospace>Dataset</monospace> is written to file:</p>
<fig id="ufig19" position="float" orientation="portrait" fig-type="figure">
<graphic xlink:href="249979_ufig19.tif"/>
</fig>
<p>In the example above, <monospace>data</monospace> is an object that has properties <monospace>value, attrs</monospace>, and <monospace>plugin_meta</monospace>. The property <monospace>attrs</monospace> is a dictionary with optional attributes, while <monospace>plugin_meta</monospace> is a dictionary with information about the plugin.</p>
<p>We create a plugin that uses this handler as follows:</p>
<fig id="ufig20" position="float" orientation="portrait" fig-type="figure">
<graphic xlink:href="249979_ufig20.tif"/>
</fig>
<p>The plugin is enabled when opening a <monospace>File</monospace> by passing it to the <monospace>plugins</monospace> parameter:</p>
<fig id="ufig21" position="float" orientation="portrait" fig-type="figure">
<graphic xlink:href="249979_ufig21.tif"/>
</fig>
</sec>
<sec id="s6c">
<label>5.3</label>
<title>Converting from hdf5 to Exdir</title>
<p>As can be seen from <xref rid="tbl1" ref-type="table">Table 1</xref>, many common formats in neuroscience are based on HDF5. Since Exdir follows the abstract data model of HDF5, it is easy to switch from HDF5 to Exdir, and these formats should be able to support both HDF5 and exdir as backends. Often, the only change needed to transition from h5py to Exdir will be to switch from the following:</p>
<fig id="ufig24" position="float" orientation="portrait" fig-type="figure">
<graphic xlink:href="249979_ufig22.tif"/>
</fig>
<p>To the following:</p>
<fig id="ufig25" position="float" orientation="portrait" fig-type="figure">
<graphic xlink:href="249979_ufig23.tif"/>
</fig>
<p>In most cases, the rest of the code can be left unchanged.</p>
<p>A few operators in h5py are missing in the reference implementation and will eventually be added. Further, HDF5 has support for linking of objects, which is currently not part of the Exdir specification and will be added in the future. Finally, the reference implementation currently does not support parallel read/write operations on single files. A future plugin is planned to provide such support.</p>
</sec>
</sec>
<sec id="s7">
<label>6</label>
<title>TOOLS FOR EXDIR</title>
<p>The Exdir command line interface and the Exdir browser are tools created to make it easier to work with Exdir data.</p>
<sec id="s7a">
<label>6.1</label>
<title>Exdir command line interface</title>
<p>Exdir-cli is a simple command line interface for browsing Exdir directories and to create Exdir <monospace>File</monospace> objects and <monospace>Group</monospace> objects. Listing the content of an Exdir <monospace>File</monospace> is done in the command line by the following:</p>
<preformat>&#x0024; exdir list mytestfile . exdir
group1
group2
dataset</preformat>
<p>Listing the contents of a Dataset is done by the following:</p>
<preformat>
&#x0024; exdir show dataset
nums
Type: Dataset
Name: /dataset
Shape : (23632 ,)
Data:
[0 0 0 &#x2026;, 6 6 6]</preformat>
</sec>
<sec id="s7b">
<label>6.2</label>
<title>Exdir browser</title>
<p>Exdir browser is a graphical user interface for viewing and editing Exdir directories (see <xref rid="fig3" ref-type="fig">Figure 3</xref>). The browser can be installed on Linux, macOS, and Windows through Anaconda<sup><xref ref-type="fn" rid="fn25">25</xref></sup> or from source<sup><xref ref-type="fn" rid="fn26">26</xref></sup>.</p>
<fig id="fig3" position="float" orientation="portrait" fig-type="figure">
<label>Figure 3.</label>
<caption><title>Screenshot of the Exdir browser.</title></caption>
<graphic xlink:href="249979_fig3.tif"/>
</fig>
<p>After opening an Exdir directory, the Exdir browser shows a hierarchical tree of all the objects in that directory. Information about each object is shown when selected and attributes of all objects may be edited. <monospace>Group</monospace> objects can be expanded to show their child objects, similar to directories on the file system. When selecting a dataset, the contents is shown in a 2D table. If the dataset is three dimensional, you can select the slice.</p>
</sec>
</sec>
<sec id="s8">
<label>7</label>
<title>PERFORMANCE</title>
<p>As with other formats, the performance of Exdir is limited by the file system and underlying hardware. In general, data readability has been prioritized over performance in Exdir, but we are improving the performance where possible.</p>
<p>We have performed benchmarks for some common operations and compared the Exdir reference implementation to the h5py Python library. The results are listed in <xref rid="tbl3" ref-type="table">Table 3</xref>. These benchmarks were performed on an in-memory virtual hard disk (RAM disk) to obtain more reliable results. Note that this only gives an indication of the performance differences between h5py and the Exdir reference implementation, as not all aspects of running on a physical hard drive are reflected.</p>
<table-wrap id="tbl3" position="float" orientation="portrait">
<label>Table 3.</label>
<caption><p>Results from benchmarks comparing performance in Exdir with h5py. A 2GB RAM disk was used as virtual hard drive for the tests. Software used: Python 3.6, NumPy 1.13.1, Ubuntu 16.04. Hardware used: Intel Core i7-4820K 3.70GHz, 32 GB RAM.</p></caption>
<graphic xlink:href="249979_tbl3.tif"/>
</table-wrap>
<p>As can be seen from <xref rid="tbl3" ref-type="table">table 3</xref>, metadata manipulation in Exdir is slow compared to HDF5. This is because we have chosen to store metadata in human-readable YAML text files. This is a deliberate choice we made because we believe readability of these files is more important than performance. However, manipulation of metadata in Exdir can outperform HDF5 on networked file systems if the file system downloads and uploads entire files when they are modified. Metadata in Exdir is stored in separate files, and only these files need to be downloaded, while the rest of the dataset can remain on the server. This is in contrast to HDF5 where the entire file may have to be downloaded.</p>
<p>Reading and writing large continuous data in Exdir is about as fast as in HDF5. This is also the case for reading and writing to parts of a dataset. However, HDF5 supports storing chunked data, which is a feature missing in Exdir, and in these cases, HDF5 is likely to outperform Exdir when reading and writing binary data.</p>
<p>Creating many empty objects performs poorly in Exdir, while it is fast in HDF5, as shown in the Create 5000 groups benchmark in <xref rid="tbl3" ref-type="table">Table 3</xref>. This is because Exdir creates a directory and an <monospace>exdir.yaml</monospace> file for each object, while HDF5 only needs to add a reference to the new object in the main file.</p>
<p>In summary, the performance of Exdir is mostly limited by the performance of the file system and the performance of the YAML and NumPy libraries. Exdir performs worse than HDF5 with many small objects, but performs similarly when working with larger datasets. Furthermore, Exdir performs worse than HDF5 with many read/write operations on metadata. We therefore recommend using a dedicated database if metadata operations are frequent and become a performance bottleneck.</p>
</sec>
<sec id="s9">
<label>8</label>
<title>DISCUSSION</title>
<p>We have proposed a new standard, Exdir, that puts the abstractions of HDF5 on top of a hierarchical directory structure. Exdir gives the same flexibility as HDF5, but with the advantages of a simpler specification, human-readable metadata, and applicability of established tools. Further, the hierarchy and metadata can be modified manually without tools specific to Exdir, while the data is accessible by existing libraries for common languages. This makes Exdir a possible replacement for HDF5 in computational and experimental data pipelines.</p>
<p>We have presented a reference implementation in Python, a command-line client, and a graphical browser that are all open source and available on GitHub. Together, these tools will hopefully make it easy for other researchers to explore the standard and provide valuable feedback. Because Exdir is based on the established NumPy and YAML formats, we expect APIs for other languages to be fairly easy to implement.</p>
<p>The reference implementation has an extensive test suite and has been thoroughly tested, although the format is still under development. The flexibility of the format gives many possibilities for future development. Exdir includes the concept of plugins, which makes it easy to extend implementations with new functionality without adding more complexity to the specification.</p>
<p>Because similar strategies for data storage are already in use, but no formal standard exists, we believe Exdir provides an opportunity for increased data sharing and development of tools that can be shared across multiple disciplines. We hope Exdir can lay the foundation for a standardization of such strategies, and contribute to the general discussion on data storage in science.</p>
</sec>
<sec id="s10">
<title>AUTHOR CONTRIBUTIONS</title>
<p>SD, MHM, and ML conceived of and designed the project. SD, MHM, ML, and ST wrote software, documentation, and the paper. All authors contributed to revising the paper and approved of the final version.</p>
</sec>
</body>
<back>
<ack>
<title>ACKNOWLEDGMENTS</title>
<p>The development of Exdir owes a great deal to other standardization efforts in science in general and neuroscience in particular, among them the contributors to HDF5, NumPy, YAML, PyYAML, SciPy, Klusta Kwik, NeuralEnsemble, and Neuroscience Without Borders.</p>
</ack>
<ref-list>
<title>REFERENCES</title>
<ref id="c1"><mixed-citation publication-type="journal"><string-name><surname>Garbers</surname>, <given-names>C.</given-names></string-name>, <string-name><surname>Kellner</surname>, <given-names>C.</given-names></string-name>, <string-name><surname>Koutsou</surname>, <given-names>A.</given-names></string-name>, and <string-name><surname>Wachtler</surname>, <given-names>M. S. T.</given-names></string-name> (<year>2017</year>). <source>The g-node infrastructure services: Safe and efficient data management for neuroscience</source> doi:<ext-link ext-link-type="uri" xlink:href="https://doi.org/10.12751/incf.ni2017.0040">https://doi.org/10.12751/incf.ni2017.0040</ext-link>.</mixed-citation></ref>
<ref id="c2"><mixed-citation publication-type="journal"><string-name><surname>Garcia</surname>, <given-names>S.</given-names></string-name>, <string-name><surname>Guarino</surname>, <given-names>D.</given-names></string-name>, <string-name><surname>Jaillet</surname>, <given-names>F.</given-names></string-name>, <string-name><surname>Jennings</surname>, <given-names>T.</given-names></string-name>, <string-name><surname>Pr&#x00F6;pper</surname>, <given-names>R.</given-names></string-name>, <string-name><surname>Rautenberg</surname>, <given-names>P. L.</given-names></string-name>, <etal>et al.</etal> (<year>2014</year>). <article-title>Neo: an object model for handling electrophysiology data in multiple formats</article-title>. <source>Frontiers in neuroinformatics</source> <volume>8</volume></mixed-citation></ref>
<ref id="c3"><mixed-citation publication-type="journal"><string-name><surname>Greenfield</surname>, <given-names>P.</given-names></string-name>, <string-name><surname>Droettboom</surname>, <given-names>M.</given-names></string-name>, and <string-name><surname>Bray</surname>, <given-names>E.</given-names></string-name> (<year>2015</year>). <article-title>Asdf: A new data format for astronomy</article-title>. <source>Astronomy and Computing</source> <volume>12</volume>, <fpage>240</fpage>&#x2013;<lpage>251</lpage>. doi:<ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.ascom.2015.06.004">https://doi.org/10.1016/j.ascom.2015.06.004</ext-link></mixed-citation></ref>
<ref id="c4"><mixed-citation publication-type="journal"><string-name><surname>Grewe</surname>, <given-names>J.</given-names></string-name>, <string-name><surname>Wachtler</surname>, <given-names>T.</given-names></string-name>, and <string-name><surname>Benda</surname>, <given-names>J.</given-names></string-name> (<year>2011</year>). <article-title>A bottom-up approach to data annotation in neurophysiology</article-title>. <source>Frontiers in Neuroinformatics</source> <volume>5</volume>, <fpage>16</fpage>. doi:<pub-id pub-id-type="doi">10.3389/fninf.2011.00016</pub-id>.</mixed-citation></ref>
<ref id="c5"><mixed-citation publication-type="journal"><string-name><surname>Hinsen</surname>, <given-names>K.</given-names></string-name> (<year>2016</year>). <source>On HDF5 and the future of data management</source>, <ext-link ext-link-type="uri" xlink:href="http://blog.khinsen.net/posts/2016/01/07/on-hdf5-and-the-future-of-data-management">http://blog.khinsen.net/posts/2016/01/07/on-hdf5-and-the-future-of-data-management</ext-link>.</mixed-citation></ref>
<ref id="c6"><mixed-citation publication-type="journal"><string-name><surname>Kadir</surname>, <given-names>S. N.</given-names></string-name>, <string-name><surname>Goodman</surname>, <given-names>D. F. M.</given-names></string-name>, and <string-name><surname>Harris</surname>, <given-names>K. D.</given-names></string-name> (<year>2014</year>). <article-title>High-dimensional cluster analysis with the masked em algorithm</article-title>. <source>Neural Computation</source> <volume>26</volume>, <fpage>2379</fpage>&#x2013;<lpage>2394</lpage>. doi:<pub-id pub-id-type="doi">10.1162/NECO_a_00661</pub-id>. PMID: <pub-id pub-id-type="pmid">25149694</pub-id>.</mixed-citation></ref>
<ref id="c7"><mixed-citation publication-type="journal"><string-name><surname>Nelson</surname>, <given-names>B.</given-names></string-name> (<year>2009</year>). <article-title>Empty archives: most researchers agree that open access to data is the scientific ideal, so what is stopping it happening? bryn nelson investigates why many researchers choose not to share</article-title>. <source>Nature</source> <volume>461</volume>, <fpage>160</fpage>&#x2013;<lpage>164</lpage>.</mixed-citation></ref>
<ref id="c8"><mixed-citation publication-type="journal"><string-name><surname>Rossant</surname>, <given-names>C.</given-names></string-name> (<year>2016a</year>). <source>Moving away from HDF5</source>, <ext-link ext-link-type="uri" xlink:href="http://cyrille.rossant.net/moving-away-hdf5">http://cyrille.rossant.net/moving-away-hdf5</ext-link>.</mixed-citation></ref>
<ref id="c9"><mixed-citation publication-type="journal"><string-name><surname>Rossant</surname>, <given-names>C.</given-names></string-name> (<year>2016b</year>). <source>Should you use HDF5?</source> <ext-link ext-link-type="uri" xlink:href="http://cyrille.rossant.net/should-you-use-hdf5">http://cyrille.rossant.net/should-you-use-hdf5</ext-link>.</mixed-citation></ref>
<ref id="c10"><mixed-citation publication-type="journal"><string-name><surname>Rossant</surname>, <given-names>C.</given-names></string-name>, <string-name><surname>Kadir</surname>, <given-names>S. N.</given-names></string-name>, <string-name><surname>Goodman</surname>, <given-names>D. F. M.</given-names></string-name>, <string-name><surname>Schulman</surname>, <given-names>J.</given-names></string-name>, <string-name><surname>Belluscio</surname>, <given-names>M.</given-names></string-name>, <string-name><surname>Buzsaki</surname>, <given-names>G.</given-names></string-name>, <etal>et al.</etal> (<year>2015</year>). <article-title>Spike sorting for large, dense electrode arrays</article-title>. <source>bioRxiv</source> doi:<pub-id pub-id-type="doi">10.1101/015198</pub-id>.</mixed-citation></ref>
<ref id="c11"><mixed-citation publication-type="journal"><string-name><surname>R&#x00FC;bel</surname>, <given-names>O.</given-names></string-name>, <string-name><surname>Prabhat</surname>, <given-names>M.</given-names></string-name>, <string-name><surname>Denes</surname>, <given-names>P.</given-names></string-name>, <string-name><surname>Conant</surname>, <given-names>D.</given-names></string-name>, <string-name><surname>Chang</surname>, <given-names>E.</given-names></string-name>, and <string-name><surname>Bouchard</surname>, <given-names>K.</given-names></string-name> (<year>2015</year>). <article-title>Brainformat: A data standardization framework for neuroscience data</article-title>. <source>bioRxiv</source> doi:<pub-id pub-id-type="doi">10.1101/024521</pub-id>.</mixed-citation></ref>
<ref id="c12"><mixed-citation publication-type="journal"><string-name><surname>Siegle</surname>, <given-names>J. H.</given-names></string-name>, <string-name><surname>Hale</surname>, <given-names>G. J.</given-names></string-name>, <string-name><surname>Newman</surname>, <given-names>J. P.</given-names></string-name>, and <string-name><surname>Voigts</surname>, <given-names>J.</given-names></string-name> (<year>2015</year>). <article-title>Neural ensemble communities: open-source approaches to hardware for large-scale electrophysiology</article-title>. <source>Current Opinion in Neurobiology</source> <volume>32</volume>, <fpage>53</fpage>&#x2013;<lpage>59</lpage>. doi:<ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.conb.2014.11.004">https://doi.org/10.1016/j.conb.2014.11.004</ext-link>. Large-Scale Recording Technology (32).</mixed-citation></ref>
<ref id="c13"><mixed-citation publication-type="journal"><string-name><surname>Stoewer</surname>, <given-names>A.</given-names></string-name>, <string-name><surname>Kellner</surname>, <given-names>C. J.</given-names></string-name>, <string-name><surname>Benda</surname>, <given-names>J.</given-names></string-name>, <string-name><surname>Wachtler</surname>, <given-names>T.</given-names></string-name>, and <string-name><surname>Grewe</surname>, <given-names>J.</given-names></string-name> (<year>2014</year>). <article-title>File format and library for neuroscience data and metadata</article-title>. <source>Frontiers in Neuroinformatics</source> doi:<pub-id pub-id-type="doi">10.3389/conf.fninf.2014.18.00027</pub-id>.</mixed-citation></ref>
<ref id="c14"><mixed-citation publication-type="journal"><string-name><surname>Teeters</surname>, <given-names>J. L.</given-names></string-name>, <string-name><surname>Godfrey</surname>, <given-names>K.</given-names></string-name>, <string-name><surname>Young</surname>, <given-names>R.</given-names></string-name>, <string-name><surname>Dang</surname>, <given-names>C.</given-names></string-name>, <string-name><surname>Friedsam</surname>, <given-names>C.</given-names></string-name>, <string-name><surname>Wark</surname>, <given-names>B.</given-names></string-name>, <etal>et al.</etal> (<year>2015</year>). <article-title>Neurodata without borders: creating a common data format for neurophysiology</article-title>. <source>Neuron</source> <volume>88</volume>, <fpage>629</fpage>&#x2013;<lpage>634</lpage>.</mixed-citation></ref></ref-list>
<fn-group>
<fn id="fn1"><label><sup>1</sup></label><p><ext-link ext-link-type="uri" xlink:href="https://hdfgroup.org">https://hdfgroup.org</ext-link></p></fn>
<fn id="fn2"><label><sup>2</sup></label><p><ext-link ext-link-type="uri" xlink:href="https://support.hdfgroup.org/HDF5/doc/">https://support.hdfgroup.org/HDF5/doc/</ext-link></p></fn>
<fn id="fn3"><label><sup>3</sup></label><p><ext-link ext-link-type="uri" xlink:href="http://numpy.org">http://numpy.org</ext-link></p></fn>
<fn id="fn4"><label><sup>4</sup></label><p><ext-link ext-link-type="uri" xlink:href="https://yaml.org">https://yaml.org</ext-link></p></fn>
<fn id="fn5"><label><sup>5</sup></label><p><ext-link ext-link-type="uri" xlink:href="http://h5py.alfven.org">http://h5py.alfven.org</ext-link></p></fn>
<fn id="fn6"><label><sup>6</sup></label><p><ext-link ext-link-type="uri" xlink:href="https://github.com/CINPLA/exdir/">https://github.com/CINPLA/exdir/</ext-link></p></fn>
<fn id="fn7"><label><sup>7</sup></label><p><ext-link ext-link-type="uri" xlink:href="http://git-scm.org">http://git-scm.org</ext-link></p></fn>
<fn id="fn8"><label><sup>8</sup></label><p><ext-link ext-link-type="uri" xlink:href="https://www.gnu.org/software/diffutils/manual/diffutils.html">https://www.gnu.org/software/diffutils/manual/diffutils.html</ext-link></p></fn>
<fn id="fn9"><label><sup>9</sup></label><p><ext-link ext-link-type="uri" xlink:href="https://www.gnu.org/software/wdiff/manual/wdiff.html">https://www.gnu.org/software/wdiff/manual/wdiff.html</ext-link></p></fn>
<fn id="fn10"><label><sup>10</sup></label><p><ext-link ext-link-type="uri" xlink:href="http://meldmerge.org/">http://meldmerge.org/</ext-link></p></fn>
<fn id="fn11"><label><sup>11</sup></label><p><ext-link ext-link-type="uri" xlink:href="http://kdiff3.sourceforge.net/doc/index.html">http://kdiff3.sourceforge.net/doc/index.html</ext-link></p></fn>
<fn id="fn14"><label><sup>14</sup></label><p><ext-link ext-link-type="uri" xlink:href="http://yaml.org/">http://yaml.org/</ext-link></p></fn>
<fn id="fn15"><label><sup>15</sup></label><p><ext-link ext-link-type="uri" xlink:href="https://github.com/kwikteam/npy-matlab">https://github.com/kwikteam/npy-matlab</ext-link></p></fn>
<fn id="fn16"><label><sup>16</sup></label><p><ext-link ext-link-type="uri" xlink:href="https://github.com/potocpav/npy-rs">https://github.com/potocpav/npy-rs</ext-link></p></fn>
<fn id="fn17"><label><sup>17</sup></label><p><ext-link ext-link-type="uri" xlink:href="https://github.com/eddelbuettel/rcppcnpy">https://github.com/eddelbuettel/rcppcnpy</ext-link></p></fn>
<fn id="fn18"><label><sup>18</sup></label><p><ext-link ext-link-type="uri" xlink:href="https://github.com/rogersce/cnpy">https://github.com/rogersce/cnpy</ext-link></p></fn>
<fn id="fn19"><label><sup>19</sup></label><p><ext-link ext-link-type="uri" xlink:href="https://web.gin.g-node.org/">https://web.gin.g-node.org/</ext-link></p></fn>
<fn id="fn20"><label><sup>20</sup></label><p><ext-link ext-link-type="uri" xlink:href="https://docs.scipy.org/doc/numpy/neps/npy-format.html">https://docs.scipy.org/doc/numpy/neps/npy-format.html</ext-link></p></fn>
<fn id="fn21"><label><sup>21</sup></label><p><ext-link ext-link-type="uri" xlink:href="https://anaconda.org/cinpla/exdir">https://anaconda.org/cinpla/exdir</ext-link></p></fn>
<fn id="fn22"><label><sup>22</sup></label><p><ext-link ext-link-type="uri" xlink:href="http://pyyaml.org">http://pyyaml.org</ext-link></p></fn>
<fn id="fn23"><label><sup>23</sup></label><p><ext-link ext-link-type="uri" xlink:href="https://docs.pytest.org">https://docs.pytest.org</ext-link></p></fn>
<fn id="fn24"><label><sup>24</sup></label><p><ext-link ext-link-type="uri" xlink:href="https://github.com/python-quantities/python-quantities">https://github.com/python-quantities/python-quantities</ext-link></p></fn>
<fn id="fn25"><label><sup>25</sup></label><p><ext-link ext-link-type="uri" xlink:href="https://anaconda.org/cinpla/exdir-browser">https://anaconda.org/cinpla/exdir-browser</ext-link></p></fn>
<fn id="fn26"><label><sup>26</sup></label><p><ext-link ext-link-type="uri" xlink:href="https://github.com/CINPLA/exdir-browser">https://github.com/CINPLA/exdir-browser</ext-link></p></fn>
</fn-group>
</back>
</article>