<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.2d1 20170631//EN" "JATS-archivearticle1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" article-type="article" dtd-version="1.2d1" specific-use="production" xml:lang="en">
<front>
<journal-meta>
<journal-id journal-id-type="publisher-id">BIORXIV</journal-id>
<journal-title-group>
<journal-title>bioRxiv</journal-title>
<abbrev-journal-title abbrev-type="publisher">bioRxiv</abbrev-journal-title>
</journal-title-group>
<publisher>
<publisher-name>Cold Spring Harbor Laboratory</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="doi">10.1101/101493</article-id>
<article-version>1.1</article-version>
<article-categories>
<subj-group subj-group-type="author-type">
<subject>Regular Article</subject>
</subj-group>
<subj-group subj-group-type="heading">
<subject>New Results</subject>
</subj-group>
<subj-group subj-group-type="hwp-journal-coll">
<subject>Bioinformatics</subject>
</subj-group>
</article-categories>
<title-group>
<article-title>Superbubbles, Ultrabubbles and Cacti</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<name><surname>Paten</surname><given-names>Benedict</given-names></name>
<xref ref-type="aff" rid="a1">1</xref>
<xref ref-type="corresp" rid="cor1">&#x002A;</xref></contrib>
<contrib contrib-type="author">
<name><surname>Novak</surname><given-names>Adam M</given-names></name>
<xref ref-type="aff" rid="a1">1</xref></contrib>
<contrib contrib-type="author">
<name><surname>Garrison</surname><given-names>Erik</given-names></name>
<xref ref-type="aff" rid="a2">2</xref></contrib>
<contrib contrib-type="author">
<name><surname>Hickey</surname><given-names>Glenn</given-names></name>
<xref ref-type="aff" rid="a1">1</xref></contrib>
<aff id="a1"><label>1</label><institution>UC Santa Cruz Genomics Institute, University of California Santa Cruz</institution>, Santa Cruz, CA 95064, <country>USA</country></aff>
<aff id="a2"><label>2</label><institution>Wellcome Trust Sanger Institute</institution>, Cambridge, <country>UK</country></aff>
</contrib-group>
<author-notes>
<corresp id="cor1"><label>&#x002A;</label>Correspondence to <email>benedict@soe.ucsc.edu</email></corresp>
</author-notes>
<pub-date pub-type="epub"><year>2017</year></pub-date>
<elocation-id>101493</elocation-id>
<history>
<date date-type="received"><day>18</day><month>1</month><year>2017</year></date>
<date date-type="accepted"><day>18</day><month>1</month><year>2017</year></date>
</history>
<permissions>
<copyright-statement>&#x00A9; 2017, Posted by Cold Spring Harbor Laboratory</copyright-statement>
<copyright-year>2017</copyright-year>
<license license-type="creative-commons" xlink:href="http://creativecommons.org/licenses/by/4.0/"><license-p>This pre-print is available under a Creative Commons License (Attribution 4.0 International), CC BY 4.0, as described at <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link></license-p></license>
</permissions>
<self-uri xlink:href="101493.pdf" content-type="pdf" xlink:role="full-text"/>
<abstract><title>Abstract</title>
<p>A superbubble is a type of directed acyclic subgraph with single distinct source and sink vertices. In genome assembly and genetics, the possible paths through a superbubble can be considered to represent the set of possible sequences at a location in a genome. Bidirected and biedged graphs are a generalization of digraphs that are increasingly being used to more fully represent genome assembly and variation problems. Here we define snarls and ultrabubbles, generalizations of superbubbles for bidirected and biedged graphs, and give an efficient algorithm for the detection of these more general structures. Key to this algorithm is the cactus graph, which we show encodes the nested decomposition of a graph into snarls and ultrabubbles within its structure. We propose and demonstrate empirically that this decomposition on bidirected and biedged graphs solves a fundamental problem by defining genetic sites for any collection of genomic variations, including complex structural variations, without need for any single reference genome coordinate system. Furthermore, the nesting of the decomposition gives a natural way to describe and model variations contained within large variations, a case not currently dealt with by existing formats, e.g. VCF.</p></abstract>
<counts>
<page-count count="13"/>
</counts>
</article-meta>
</front>
<body>
<sec id="s1"><label>1</label><title>Introduction</title>
<p>Graphs are used extensively in biological sequence analysis, where they are often used to represent uncertainty about, or ensembles of, potential nucleotide sequences. Several subtypes have become especially prominent for sequence representation, in particular the De Bruijn graph [<xref ref-type="bibr" rid="c4">4</xref>,<xref ref-type="bibr" rid="c13">13</xref>], the string graph [<xref ref-type="bibr" rid="c10">10</xref>], the breakpoint graph [<xref ref-type="bibr" rid="c1">1</xref>,<xref ref-type="bibr" rid="c14">14</xref>] and the bidirected graph (aka variation graph or sequence graph) [<xref ref-type="bibr" rid="c6">6</xref>,<xref ref-type="bibr" rid="c9">9</xref>].</p>
<p>In the context of de novo sequence assembly several characteristic types of subgraph are recognised, in particular the <italic>bubble</italic> [<xref ref-type="bibr" rid="c16">16</xref>], a pair of paths that start and end at common source and sink nodes but are otherwise disjoint. In the context of sequence analysis, a bubble can represent a potential sequencing error or a genetic variation within a set of homologous molecules. An efficient algorithm for bubble detection was proposed by [<xref ref-type="bibr" rid="c2">2</xref>].</p>
<p>A generalization of the notion of a bubble, the superbubble is a more complex subgraph type in which a set of (not necessarily disjoint) paths start and end at common source and sink nodes. This problem was initially proposed by [<xref ref-type="bibr" rid="c11">11</xref>], who gave a quadratic solution. [<xref ref-type="bibr" rid="c3">3</xref>] recently provided a linear time algorithm for superbubbles on directed acyclic graphs (DAGs). This result, when paired with a previous linear time transformation of the problem of superbubbles on directed graphs to superbubbles on DAGS [<xref ref-type="bibr" rid="c15">15</xref>], yields a linear cost solution for computing superbubbles on digraphs. For a review of superbubbles and their use in sequence analysis see [<xref ref-type="bibr" rid="c8">8</xref>]. In this paper we generalize the idea of superbubble to the more general case of a bidirected graph, connect a slight generalization of the superbubble, which we call the ultrabubble, and show how it relates to the decomposition of the graph into 2- and 3-edge connected components.</p>
</sec>
<sec id="s2"><label>2</label><title>Methods</title>
<sec id="s2a"><label>2.1</label><title>Directed, Bidirected and Biedged Graphs</title>
<p>A <italic>bidirected graph D</italic> &#x003D; (<italic>V<sub>D</sub></italic>,<italic>E<sub>D</sub></italic>) is a graph in which each endpoint of every edge has an independent orientation (denoted either &#x201C;left&#x201D; or &#x201C;right&#x201D;), indicating if the endpoint is incident with the left or right <italic>side</italic> of the given vertex. The sides of <italic>D</italic> are therefore the set <italic>V<sub>D</sub></italic> &#x00D7; &#x007B;<italic>left</italic>, <italic>right</italic>&#x007D;, and each edge in <italic>E<sub>D</sub></italic> is a pair set of two sides (<xref ref-type="fig" rid="fig1">Fig.1</xref>). We say for all <italic>x</italic> &#x2208; <italic>V<sub>D</sub></italic>, (<italic>x</italic>,<italic>left</italic>) and (<italic>x</italic>, <italic>right</italic>) are <italic>opposite sides</italic>.</p>
<p>Any digraph is a special case of a bidirected graph in which each edge connects a left and a right side (by convention we here consider the right side to be the outgoing side and the left side the incoming side, so that the conversion from a digraph to a bidirected graph is determined; see <xref ref-type="fig" rid="fig1">Fig. 1</xref>).</p>
<fig id="fig1" position="float"><label>Fig. 1.</label>
<caption><title>(A) A digraph. (B) A bidirected graph. Each node is drawn as a box and the orientation for each edge endpoint is indicated by the connection to either the left or right side of the node. The graph excluding the dotted edges is the equivalent bidirected graph for the digraph in (A); the dotted edges encode an inversion that cannot be expressed in the digraph representation. (C) A biedged graph equivalent to the bidirected graph shown in (B).</title>
</caption>
<graphic xlink:href="101493_fig1.tif"/></fig>
<p>A <italic>biedged graph</italic> is a graph with two types of edges: <italic>black edges</italic> and <italic>grey edges</italic>, such that each vertex is incident with at most one black edge (<xref ref-type="fig" rid="fig1">Fig. 1(C)</xref>).</p>
<p>For any bidirected graph <italic>D</italic> there exists an equivalent biedged graph <italic>B</italic>(<italic>D</italic>) &#x003D; (<italic>V<sub>B</sub></italic><sub>(<italic>D</italic>)</sub>, <italic>E<sub>B</sub></italic><sub>(<italic>D</italic>)</sub>) where:</p>
<list list-type="bullet">
<list-item><p><italic>V<sub>B</sub></italic><sub>(<italic>D</italic>)</sub> &#x003D; <italic>V<sub>D</sub></italic> &#x00D7; &#x007B;<italic>left</italic>, <italic>right</italic>&#x007D;, the sides of <italic>V<sub>D</sub></italic>.</p></list-item>
<list-item><p><italic>E<sub>B</sub></italic><sub>(<italic>D</italic>)</sub> &#x003D; <italic>S<sub>B</sub></italic><sub>(<italic>D</italic>)</sub> &#x222A; <italic>E<sub>D</sub></italic>, where <italic>E<sub>D</sub></italic> are the grey edges,</p></list-item>
<list-item><p>and <italic>S<sub>B</sub></italic><sub>(<italic>D</italic>)</sub> &#x003D; &#x007B;&#x007B;(<italic>x</italic>, <italic>left</italic>), (<italic>x</italic>, <italic>right</italic>)&#x007D;&#x007C;<italic>x</italic> &#x2208; <italic>V<sub>D</sub></italic>&#x007D; are the black edges.</p></list-item>
</list>
<p>For a vertex <italic>x</italic> &#x220A; <italic>V<sub>B</sub></italic><sub>(<italic>D</italic>)</sub> we use the notation <italic>x</italic>&#x0302; to denote the opposite side to <italic>x</italic>, e.g. for <italic>x</italic> &#x003D; (<italic>x</italic>&#x2032;, <italic>left</italic>) &#x2208; <italic>V<sub>B</sub></italic><sub>(<italic>D</italic>)</sub>, <italic>x</italic>&#x0302; &#x003D; (<italic>x</italic>&#x2032;,<italic>right</italic>).</p>
<p>Clearly the bidirected and biedged representations are essentially equivalent, and the choice to use either one is largely a stylistic consideration. For the remainder of this paper we will mostly use the biedged representation. As any digraph is a special case of a bidirected graph and any bidirected graph has a equivalent biedged graph, so any digraph has an equivalent biedged graph.</p>
</sec>
<sec id="s2b"><label>2.2</label><title>Directed Walks on Biedged and Bidirected Graphs</title>
<p>A directed walk on a bidirected graph is a walk that at each visited vertex exits the opposite side to that which it enters. On a biedged graph a directed walk is equivalent to a walk that alternates between black and grey edges. A bidirected or biedged graph is acyclic if it contains no directed cycles.</p>
<p>These definitions are a generalization of a directed walk on a digraph. In a bidirected representation of a digraph all edges in a directed walk are all left-to-right or all right-to-left. A directed walk on a general bidirected (or biedged) graph can mix these two types and additionally include edges that do not alternate the orientation of their endpoints (e.g. left-right and right-right and left-left edges).</p>
<p>Given these generalizing relationships, clearly a digraph <bold>D</bold> is acyclic iff <italic>B</italic>(<bold>D</bold>) is acyclic. Note that any acyclic biedged graph can also be converted into an equivalent directed acyclic graph (DAG):</p>
<statement><label>Lemma 1.</label>
<p><italic>For any acyclic biedged graph B</italic>(<italic>D</italic>) <italic>there exists an isomorphic biedged graph B</italic>(<bold><italic>D</italic></bold>) <italic>such that <bold>D</bold> is a DAG.</italic></p>
<p><italic>Proof</italic>. Use a depth first search (DFS) beginning at side <italic>x</italic> to label the sides of <italic>B</italic>(<italic>D</italic>) either &#x2018;red&#x2019; or &#x2018;white&#x2019;: If <italic>x</italic> is not already labelled then label <italic>x</italic> red and <italic>x</italic>&#x0302; white. For each grey edge incident with <italic>x</italic>&#x0302;, if the connected side is not labeled, label the connected side red and continue recursively via DFS. In this way all the sides in the connected component containing <italic>x</italic> will be labeled in a single DFS. If during the recursion the connected side encountered is already labelled then it must be labeled red, else there would exist a cycle in the DFS, a contradiction. Use the labelling to create <italic>B</italic>(<bold>D</bold>), isomorphic to <italic>B</italic>(<bold>D</bold>) but replacing the orientation of the sides so that each side labeled white is a left side and each side labeled red is a right side. All edges in <italic>B</italic>(<bold>D</bold>) connect a left and a right side.</p>
</statement>
</sec>
<sec id="s2c"><label>2.3</label><title>Superbubbles, Snarls and Ultrabubbles</title>
<p>Repeating the definition from [<xref ref-type="bibr" rid="c11">11</xref>], any pair of distinct vertices (<italic>x</italic>,<italic>y</italic>) in a digraph <bold>D</bold> is called a <italic>superbubble</italic> (<xref ref-type="fig" rid="fig2">Fig. 2(A)</xref>) if:</p>
<list list-type="bullet">
<list-item><p><italic>reachability</italic>: <italic>y</italic> is reachable from <italic>x</italic>.</p></list-item>
<list-item><p><italic>matching</italic>: The set of vertices, <italic>X</italic>, reachable from <italic>x</italic> without passing through <italic>y</italic> is equal to the set of vertices from which <italic>y</italic> is reachable without passing through <italic>x</italic> (passing through here means to enter and then exit a vertex on the path).</p></list-item>
<list-item><p><italic>acyclicity</italic>: The subgraph induced by <italic>X</italic> is acyclic.</p></list-item>
<list-item><p><italic>minimality</italic>: No vertex in <italic>X</italic> other than <italic>y</italic> forms a pair with <italic>x</italic> that satisfies the criteria defined above, and similarly for <italic>y</italic>.</p>
</list-item>
</list>
<p>We call the subgraph induced by <italic>X</italic> the <italic>superbubble subgraph</italic>.</p>
<p>To generalize superbubbles for biedged graphs we introduce the notion of a snarl, a minimal subgraph in a biedged graph whose vertices are at most 2-black-edge-connected (2-BEC) to the remainder of the graph (two vertices in a biedged graph are <italic>k</italic>-black-edge-connected (<italic>k</italic>-BEC) if it takes the deletion of at least <italic>k</italic> black edges to disconnect them). In a biedged graph <italic>B</italic>(<italic>D</italic>) a pair set of distinct, non-opposite vertices &#x007B;<italic>x</italic>, <italic>y</italic>&#x007D; are a <italic>snarl</italic> (<xref ref-type="fig" rid="fig2">Fig. 2(B)</xref>) if:</p>
<list list-type="bullet">
<list-item><p><italic>seperable</italic>: The removal of the black edges incident with <italic>x</italic> and <italic>y</italic> disconnects the graph, creating a <italic>separated component X</italic> containing <italic>x</italic> and <italic>y</italic> and not <italic>x</italic>&#x0302; and <italic>y</italic>&#x0302;.</p></list-item>
<list-item><p><italic>minimality</italic>: No node <italic>z</italic> in <italic>X</italic> exists such that &#x007B;<italic>x</italic>, <italic>z</italic>&#x007D; fulfils the above criteria, and similarly for <italic>y</italic>.</p></list-item>
</list>
<fig id="fig2" position="float"><label>Fig. 2.</label>
<caption><title>(A) Superbubbles in a digraph. The superbubbles are indicated by pairs of numbered arrows. (B) A biedged graph representation of the digraph in (A). The ultrabubbles are illustrated, as are two snarls that are not ultrabubbles (of several; pairs 5 and 6, whose separated components contain cycles).</title>
</caption>
<graphic xlink:href="101493_fig2.tif"/></fig>
<p>We call a vertex not incident with a grey edge a <italic>tip</italic> [<xref ref-type="bibr" rid="c16">16</xref>]. In a biedged graph <italic>B</italic>(<italic>D</italic>) a snarl is an <italic>ultrabubble</italic> if its separated component is acyclic and contains no tips.</p>
<p>The following shows that a superbubble in a digraph is an ultrabubble in the equivalent biedged graph.</p>
<statement><label>Lemma 2.</label>
<p><italic>For any superbubble</italic> (<italic>x</italic>, <italic>y</italic>) <italic>in a digraph <bold>D</bold></italic>, <italic>the pair set</italic> &#x007B;<italic>x</italic>&#x2032; &#x003D; (<italic>x</italic>, <italic>right</italic>), <italic>y</italic>&#x2032; &#x003D; (<italic>y</italic>, <italic>left</italic>)&#x007D; <italic>is an ultrabubble in B</italic>(<bold><italic>D</italic></bold>).</p>
<p><italic>Proof.</italic> Let <italic>d</italic> and <italic>e</italic> be the black edges incident with <italic>x</italic>&#x2032; and <italic>y</italic>&#x2032;, respectively, and let <italic>X</italic> be the superbubble subgraph of (<italic>x</italic>, <italic>y</italic>).</p>
</statement>
<p>We start by proving that &#x007B;<italic>x</italic>&#x2032;, <italic>y</italic>&#x2032;&#x007D; satisfies the separable criteria. As <italic>y</italic> is reachable from <italic>x</italic> by definition there exists a directed path in <italic>B</italic>(<bold>D</bold>) between <italic>x</italic>&#x2032; (the right side of <italic>x</italic>) and <italic>y</italic>&#x2032; (the left side of <italic>y</italic>) that excludes <italic>d</italic> and <italic>e</italic>. After the deletion of these black edges <italic>x</italic>&#x2032; and <italic>y</italic>&#x2032; therefore remain connected. If the separable criteria is not satisfied the deletion of <italic>d</italic> and <italic>e</italic> must therefore not disconnect <italic>x</italic>&#x2032; and <italic>y</italic>&#x2032; from either or both <inline-formula><alternatives><inline-graphic xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="101493_inline1.gif"/></alternatives></inline-formula> and <inline-formula><alternatives><inline-graphic xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="101493_inline2.gif"/></alternatives></inline-formula>, without loss of generality assume <italic>x</italic>&#x2032; (and therefore <italic>y</italic>&#x2032;) remains connected to <inline-formula><alternatives><inline-graphic xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="101493_inline3.gif"/></alternatives></inline-formula>.</p>
<p>If <inline-formula><alternatives><inline-graphic xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="101493_inline4.gif"/></alternatives></inline-formula> is on a directed walk from <italic>x</italic>&#x2032; that excludes <italic>d</italic> then the addition of <italic>d</italic> to this walk defines a directed cycle in <italic>B</italic>(<bold>D</bold>). As all nodes reachable from <italic>x</italic> are in the separated component <italic>X</italic>, the existence of this cycle in <italic>B</italic>(<bold>D</bold>)) implies the existence of a corresponding directed cycle in <italic>X</italic>, a contradiction.</p>
<p>If there exists a non-directed walk from <italic>x</italic>&#x2032; to <inline-formula><alternatives><inline-graphic xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="101493_inline5.gif"/></alternatives></inline-formula> then let <italic>z</italic>&#x2032; be the last node on the walk from <italic>x</italic>&#x2032; such that the subwalk between <italic>x</italic>&#x2032; and <italic>z</italic>&#x2032; is a directed walk. By definition, there exists directed walk from <italic>z</italic>&#x2032; to <italic>y</italic>&#x2032;. The next node on the walk from <italic>x</italic>&#x2032; to <inline-formula><alternatives><inline-graphic xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="101493_inline6.gif"/></alternatives></inline-formula> after <italic>z</italic>&#x2032; is, by definition, not reachable from <italic>x</italic>&#x2032; but <italic>y</italic>&#x2032; must be reachable from this node. This implies a contradiction of the matching criteria for the corresponding nodes in <italic>X</italic>.</p>
<p>We have therefore established that &#x007B;<italic>x</italic>&#x2032;, <italic>y</italic>&#x2032;&#x007D; fufills the seperable criteria. We have already established that iff a digraph is acyclic its equivalent biedged graph is acyclic, therefore the seperated component of &#x007B;<italic>x</italic>&#x2032;, <italic>y</italic>&#x2032;&#x007D; is acyclic. As every node in <italic>X</italic> is both reachable from <italic>x</italic> and on a path from <italic>y</italic>, the separated component clearly contains no tips.</p>
<p>It remains to prove that &#x007B;<italic>x</italic>&#x2032;, <italic>y</italic>&#x2032;&#x007D; fufills the minimality criteria. If &#x007B;<italic>x</italic>&#x2032;, <italic>y</italic>&#x2032;&#x007D; do not satisfy the minimality criteria without loss of generality there exists a node <italic>z</italic>&#x2032; in the separated component of &#x007B;<italic>x</italic>&#x2032;, <italic>y</italic>&#x2032;&#x007D; such that &#x007B;<italic>x</italic>&#x2032;, <italic>y</italic>&#x2032;&#x007D; are separable. It follows that all directed paths from <italic>x</italic>&#x2032; to <italic>y</italic>&#x2032; that exclude <italic>d</italic> and <italic>e</italic> visit <italic>z</italic>&#x2032;, and for the node <italic>z</italic> in <bold>D</bold> contained in <italic>z</italic>&#x2032;, (<italic>x</italic>, <italic>z</italic>) fulfills (clearly) all the superbubble criteria, a contradiction.</p>
</sec>
<sec id="s2d"><label>2.4</label><title>Cactus Graphs</title>
<p>A cactus graph is a graph in which any two vertices are at most two-edge connected [<xref ref-type="bibr" rid="c7">7</xref>]. In a cactus graph each edge is part of at most one simple cycle, and therefore any two simple cycles intersect at most one vertex.</p>
<p>For a graph <italic>G</italic> &#x003D; (<italic>V<sub>G</sub></italic>, <italic>E<sub>G</sub></italic>) let <italic>G&#x2032;</italic> &#x003D; (<italic>V<sub>G&#x2032;</sub></italic>, <italic>E<sub>G&#x2032;</sub></italic>) be a multigraph created by <italic>merging</italic> subsets of the vertices, such that:
<list list-type="bullet">
<list-item><p><italic>V<sub>G&#x2032;</sub></italic> is a partition of <italic>V<sub>G</sub></italic>,</p></list-item>
<list-item><p><italic>E<sub>G&#x2032;</sub></italic> &#x003D; &#x007B;&#x007B;<italic>a<sub>G&#x2032;</sub></italic>(<italic>x</italic>),<italic>a<sub>G&#x2032;</sub></italic>(<italic>y</italic>)&#x007D;|&#x007B;<italic>x</italic>,<italic>y</italic>&#x007D; &#x2208; <italic>E<sub>G</sub></italic>&#x007D; is a multiset.</p></list-item>
</list>
where <italic>a<sub>G&#x2032;</sub></italic>: <italic>V<sub>G</sub></italic> &#x2192; <italic>V<sub>G&#x2032;</sub></italic> is a graph homomorphism that maps each vertex in <italic>V<sub>G</sub></italic> to the set in <italic>V<sub>G&#x2032;</sub></italic> that contains it.</p>
<p>Merging all equivalence classes of 3-edge connected (3-EC) vertices in a graph results in a cactus graph [<xref ref-type="bibr" rid="c12">12</xref>].</p>
<p>For a biedged graph <italic>B</italic>(<italic>D</italic>) let <italic>C</italic>(<italic>D</italic>) be the cactus graph created by first contracting all the grey edges in <italic>B</italic>(<italic>D</italic>) then for each equivalence class of 3-EC vertices in the resulting graph merging together the vertices within the equivalence class (<xref ref-type="fig" rid="fig3">Fig. 3(A-C)</xref>). As with <italic>G</italic>&#x2032; and <italic>G</italic>, <italic>V<sub>C</sub></italic><sub>(<italic>D</italic>)</sub> is a partition of the vertices of <italic>V<sub>B</sub></italic><sub>(<italic>D</italic>)</sub>, and <italic>E<sub>C</sub></italic><sub>(<italic>D</italic>)</sub> &#x003D; <italic>&#x007B;&#x007B;<italic>a<sub>C</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>x</italic>),<italic>a<sub>C</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>y</italic>)&#x007D;&#x007C;&#x007B;<italic>x</italic>,<italic>y</italic>&#x007D; &#x2208; <italic>S<sub>B</sub></italic><sub>(<italic>D</italic>)</sub>&#x007D;</italic> is a multiset.</p>
<fig id="fig3" position="float"><label>Fig. 3.</label>
<caption><title>(A) A biedged graph <italic>B</italic>(<italic>D</italic>) with ultrabubbles indicated by pairs of numbered arrows. (B) The graph in (A) after contracting the grey edges. (C) The cactus graph <italic>C</italic>(<italic>D</italic>) for <italic>B</italic>(<italic>D</italic>). (D) The bridge forest <italic>D</italic>(<italic>D</italic>). (E) The cactus tree <italic>T</italic>(<italic>D</italic>). (F) A net for the number 2 bridge pair in (A). The projection of chain pairs in <italic>B</italic>(<italic>D</italic>) to the other graphs is shown using the numbered arrows, with the arrows drawn along the projecting black edge incident with the projected vertex.</title>
</caption>
<graphic xlink:href="101493_fig3.tif"/></fig>
<p>For a vertex <italic>x</italic> &#x2208; <italic>V<sub>B</sub></italic><sub>(<italic>D</italic>)</sub> we call <italic>a<sub>C</sub></italic><sub>(<italic>D</italic>)</sub> its <italic>projection</italic> (in <italic>C</italic>(<italic>D</italic>)). Similarly for a set of vertices <italic>X</italic> &#x2282; <italic>V<sub>B</sub></italic><sub>(<italic>D</italic>)</sub> we call &#x007B;<italic>a<sub>C</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>x</italic>)&#x007C;<italic>x</italic> &#x2208; <italic>X</italic>&#x007D; the projection of <italic>X</italic> (in <italic>C</italic>(<italic>D</italic>)). Let <italic>b<sub>C</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>x</italic>) &#x003D; &#x007B;<italic>a<sub>C</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>x</italic>), <italic>a<sub>C</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>x</italic> &#x0302;)&#x007D;, which is the projection of the black edge incident with <italic>x</italic> in <italic>C</italic>(<italic>D</italic>).</p>
<p><xref ref-type="app" rid="app1">Appendix 1</xref> gives lemmas that make explicit the relationship between the edge connectivity of vertices in <italic>B</italic>(<italic>D</italic>) and <italic>C</italic>(<italic>D</italic>), and which we use to prove the relationship between the snarls of <italic>B</italic>(<italic>D</italic>) and <italic>C</italic>(<italic>D</italic>).</p>
</sec>
<sec id="s2e"><label>2.5</label><title>Snarls and Cacti</title>
<p>A pair set of distinct vertices &#x007B;<italic>x</italic>, <italic>y</italic>&#x007D; in <italic>B</italic>(<italic>D</italic>) are a <italic>chain pair</italic> if they project to the same vertex in <italic>C</italic>(<italic>D</italic>) and their incident black edges project to the same simple cycle in <italic>C</italic>(<italic>D</italic>) (e.g. grey arrows and cyan arrows in <xref ref-type="fig" rid="fig3">Fig. 3(C)</xref>). A cyclic sequence of chain pairs within the same simple cycle in <italic>C</italic>(<italic>D</italic>) and ordered according to the ordering of this simple cycle is a <italic>(cyclic) chain</italic>. Contiguous chain pairs in a chain share two opposite sides of a black edge in <italic>B</italic>(<italic>D</italic>).</p>
<p>For a cactus graph <italic>C</italic>(<italic>D</italic>), the graph <italic>D</italic>(<italic>D</italic>) resulting from contracting all the edges in simple cycles in <italic>C</italic>(<italic>D</italic>) is a called a <italic>bridge forest</italic> (<xref ref-type="fig" rid="fig3">Fig. 3(D)</xref>).</p>
<p>A pair set of distinct vertices &#x007B;<italic>x</italic>, <italic>y</italic>&#x007D; in <italic>B</italic>(<italic>D</italic>) are a <italic>bridge pair</italic> if they project to the same vertex in <italic>D</italic>(<italic>D</italic>) and both their incident black edges are bridges (e.g. pairs of arrows numbered 1 and 2 in <xref ref-type="fig" rid="fig3">Fig. 3(D)</xref>). A maximum sequence of bridge pairs within <italic>D</italic>(<italic>D</italic>) connected by incident nodes with degree two is an <italic>(acyclic) chain</italic>. As with chain pairs, contiguous bridge pairs in a chain share two opposite sides of a black (bridge) edge in <italic>B</italic>(<italic>D</italic>).</p>
<statement><label>Theorem 1.</label>
<p><italic>The set of snarls in B</italic>(<italic>D</italic>) <italic>is equal to the union of chain pairs and bridge pairs</italic>.</p>
<p><italic>Proof</italic>. Follows from Lemmas 12 and 13 given in Appendix 2.</p>
<p>Given Theorem 1 to calculate the set of snarls for a given biedged graph it is sufficient to calculate the cactus graph to give the set of snarls that map to chain pairs and the bridge forest to calculate the set of snarls that map to bridge pairs. Constructing a cactus graph of the type described for a biedged graph is linear in the size of the biedged graph (using the algorithm described in [<xref ref-type="bibr" rid="c12">12</xref>]), and clearly the cost of then calculating the bridge forest from the cactus graph is similarly linear. The number of chain pairs is clearly linear in the size of the biedged graph, however, the number of bridge pairs is potentially quadratic in the number of bridge pairs, so enumerating these latter snarls has potentially worst case quadratic cost in terms of the size of the biedged graph. Below we consider ways to prune the set of snarls by using their natural nesting relationships to create a hierarchy of snarls that is at most linear in the size of the biedged graph.</p>
</statement>
</sec>
<sec id="s2f"><label>2.6</label><title>Ultrabubbles and Cactus Trees</title>
<p>Given Theorem 1, to determine the ultrabubbles in <italic>B</italic>(<italic>D</italic>) it is sufficient to check for each chain and bridge pair if the separated component is acyclic and contains no tips. As snarls can contain each other, to do this efficiently we decompose the problem into a series of smaller independent problems. We use a modification of the cactus graph called a cactus tree. For a cactus graph <italic>C</italic>(<italic>D</italic>) the <italic>cactus tree T</italic>(<italic>D</italic>) is created by, for each simple cycle <italic>S</italic> in <italic>C</italic>(<italic>D</italic>), making a novel <italic>chain</italic> vertex, adding an edge between each vertex in <italic>S</italic> and <italic>x</italic>, and deleting the edges in <italic>S</italic> (<xref ref-type="fig" rid="fig3">Fig. 3(E)</xref>). We call each non-chain vertex (a member of the set <italic>V<sub>C</sub></italic><sub>(<italic>D</italic>)</sub>) in <italic>T</italic>(<italic>D</italic>) a <italic>net</italic> vertex. For each chain pair &#x007B;<italic>x</italic>, <italic>y</italic>&#x007D; in <italic>B</italic>(<italic>D</italic>) the edge in <italic>T</italic>(<italic>D</italic>) connecting the net vertex projected to by <italic>x</italic> and <italic>y</italic> and the chain vertex representing the simple cycle in <italic>C</italic>(<italic>D</italic>) projected to by the black edges incident with <italic>x</italic> and <italic>y</italic> is the chain pair&#x2019;s <italic>chain edge</italic>. Each bridge edge in <italic>B</italic>(<italic>D</italic>) projects to the other type of edge in <italic>T</italic>(<italic>D</italic>), which connects two net vertices. Each pair of such edges connected by a path of edges connecting chain and net vertices represents a bridge pair. The edges of a cactus tree <italic>T</italic>(<italic>D</italic>) are therefore decomposable into a set of edges representing the chain pairs in <italic>B</italic>(<italic>D</italic>) and a set of edges representing the bridges in <italic>B</italic>(<italic>D</italic>).</p>
<p>A <italic>parent</italic> snarl contains a distinct <italic>child</italic> snarl if the separated component of the child is contained entirely within the separated component of the parent. From the definition it follows that a snarl that is a bridge pair cannot be contained within another a snarl.</p>
<p>For a snarl &#x007B;<italic>x</italic>, <italic>y</italic>&#x007D; in <italic>B</italic>(<italic>D</italic>), let <italic>X</italic> be the path in <italic>T</italic>(<italic>D</italic>) connecting <italic>a<sub>T</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>x</italic>) and <italic>a<sub>T</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>y</italic>). <italic>X</italic> starts and ends with net vertices and alternates between chain and net vertices. If &#x007B;<italic>x</italic>, <italic>y</italic>&#x007D; is a chain pair then <italic>X</italic> consists only of the net vertex which both <italic>x</italic> and <italic>y</italic> project to in <italic>T</italic>(<italic>D</italic>). The <italic>net graph Y</italic> for &#x007B;<italic>x</italic>, <italic>y</italic>&#x007D; is a biedged graph as follows (<xref ref-type="fig" rid="fig3">Fig. 3(E)</xref>):</p>
<list list-type="bullet">
<list-item><p>The vertices <italic>V<sub>Y</sub></italic> are the subset of vertices in <italic>B</italic>(<italic>D</italic>) that project to net vertices in <italic>X</italic>.</p></list-item>
<list-item><p>The grey edges in <italic>E<sub>Y</sub></italic> are the subset of grey edges in <italic>E<sub>B</sub>(<sub>D</sub>)</italic> that connect members of <italic>V<sub>Y</sub></italic>.</p></list-item>
<list-item><p>There is a black edge <italic>e</italic> connecting each pair &#x007B;<italic>x</italic>&#x2032;, <italic>y</italic>&#x2032;&#x007D; of distinct vertices in <italic>V<sub>Y</sub></italic> not equal to &#x007B;<italic>x</italic>, <italic>y</italic>&#x007D; whose incident black edges in <italic>B</italic>(<italic>D</italic>) both project to the same simple cycle in <italic>V<sub>C</sub></italic><sub>(<italic>D</italic>)</sub> and are connected by a path that starts and ends with black edges.</p></list-item>
</list>
<p>We can use net graphs to determine if snarls are ultrabubbles. The net graph for a snarl &#x007B;<italic>x</italic>, <italic>y</italic>&#x007D; is <italic>bridgeless</italic> if it does not contain a vertex other than <italic>x</italic> or <italic>y</italic> without an incident black edge.</p>
<statement><label>Lemma 3.</label>
<p><italic>A snarl</italic> &#x007B;<italic>x</italic>,<italic>y</italic>&#x007D; in <italic>B</italic>(<italic>D</italic>) <italic>is an ultrabubble iff its net graph and the net graph of each snarl contained in</italic> &#x007B;<italic>x</italic>, <italic>y</italic>&#x007D; <italic>is acyclic and bridgeless.</italic></p>
<p><italic>Proof.</italic> IF: If the separated component of &#x007B;<italic>x</italic>,<italic>y</italic>&#x007D; is not acyclic then it contains a directed cycle <italic>S</italic>. Let <italic>e</italic> &#x003D; &#x007B;<italic>x</italic>&#x2032;, <italic>y</italic>&#x2032;&#x007D; be a grey edge in <italic>S</italic>. By definition <italic>e</italic> is contained within exactly one net graph <italic>X</italic>. If <italic>x</italic>&#x2032; is not incident with a black edge in <italic>X</italic> then its incident black edge in <italic>B</italic>(<italic>D</italic>) is a bridge and <italic>x</italic>&#x2032; cannot be a member of a directed cycle in <italic>B</italic>(<italic>D</italic>), therefore let &#x007B;<italic>x</italic>&#x2032;,<italic>z</italic>&#x2032;&#x007D; be the black edge in <italic>X</italic> incident with <italic>x</italic>&#x2032;. If <italic>S</italic> does not include <italic>z</italic>&#x2032; then there must exist a directed walk in <italic>B</italic>(<italic>D</italic>) from <inline-formula><alternatives><inline-graphic xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="101493_inline7.gif"/></alternatives></inline-formula>,<italic>z</italic>&#x2032; that excludes <italic>z</italic>&#x2032;, but as the black edges incident with <italic>x</italic>&#x2032;,<italic>z</italic>&#x2032; project to the same simple cycle in <italic>C</italic>(<italic>D</italic>), by Lemmas 6 and 11, the deletion of these black edges disconnects <italic>B</italic>(<italic>D</italic>), separating <inline-formula><alternatives><inline-graphic xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="101493_inline8.gif"/></alternatives></inline-formula> and <italic>y</italic>&#x2032;, and implying no such directed walk excluding <italic>z</italic>&#x2032; be the black edge in <italic>X</italic> incident with <italic>x</italic>&#x2032;. If <italic>S</italic> does nocan exist. <italic>S</italic> therefore contains <italic>x</italic>&#x2032;, <italic>y</italic>&#x2032;, <italic>z</italic>&#x2032; and, by the same logic, the node <italic>w</italic>&#x2032; in <italic>X</italic> connected by a black edge to <italic>y</italic>&#x2032;. If <italic>w</italic>&#x2032; and <italic>z</italic>&#x2032; are not connected by a grey edge then add the nodes in <italic>S</italic> that they are connected to by a grey edge in <italic>X</italic> to this set. Continuing this set extension we must ultimately define a directed cycle in <italic>X</italic>, therefore any cycle <italic>S</italic> in the separated component must define one or more cycles in a net graph. If the separated component contains a tip vertex <italic>x</italic>&#x2032; then the incident black edge is by definition a bridge, therefore the net graph containing <italic>x</italic> is not bridgeless.</p>
</statement>
<p>ONLY IF: Each black edge &#x007B;<italic>x</italic>&#x2032;,<italic>y</italic>&#x2032;&#x007D; in a net graph <italic>X</italic> represents a portion of a simple cycle in <italic>C</italic>(<italic>D</italic>), there therefore exists a directed path between <italic>x</italic>&#x2032; and <italic>y</italic>&#x2032; in <italic>B</italic>(<italic>D</italic>) that starts and ends with the black edges incident with <italic>x</italic>&#x2032; and <italic>y</italic>&#x2032;. If there exists a directed cycle <italic>S</italic> in <italic>X</italic> then for each black edge in <italic>S</italic> we can replace it with a corresponding directed path in <italic>B</italic>(<italic>D</italic>) and so define a valid directed cycle in <italic>B</italic>(<italic>D</italic>). If there exists a node <italic>x</italic>&#x2032; in <italic>X</italic> not equal to <italic>x</italic> or <italic>y</italic> and without an incident black edge then &#x007B;<italic>x</italic>&#x2032;,<inline-formula><alternatives><inline-graphic xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="101493_inline9.gif"/></alternatives></inline-formula> is a bridge edge in <italic>B</italic>(<italic>D</italic>).</p>
<p>It is easily verified that either there exists a tip or a directed cyclic walk in the separable component.</p>
<p>For a chain pair &#x007B;<italic>x</italic>, <italic>y</italic>&#x007D; in <italic>B</italic>(<italic>D</italic>) let the <italic>contained chain pairs</italic> be the chain pairs whose chain edges in <italic>T</italic>(<italic>D</italic>) are:</p>
<list list-type="bullet">
<list-item><p>reachable from <italic>a<sub>T</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>x</italic>) without passing through the chain edge of &#x007B;<italic>x</italic>,<italic>y</italic>&#x007D; and which,</p></list-item>
<list-item><p>on the path from <italic>a<sub>T</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>x</italic>), first visit the incident chain vertex and then the incident net vertex.</p></list-item>
</list>
<p>Similarly for a bridge pair &#x007B;<italic>x</italic>,<italic>y</italic>&#x007D; in <italic>B</italic>(<italic>D</italic>) let the <italic>contained chain pairs</italic> be the chain pairs whose chain edges in <italic>T</italic>(<italic>D</italic>) are:</p>
<list list-type="bullet">
<list-item><p>reachable from a vertex on the path <italic>X</italic> between <italic>a<sub>T</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>x</italic>) and <italic>a<sub>T</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>y</italic>) without passing through an edge in <italic>X</italic> or the projection in <italic>T</italic>(<italic>D</italic>) of the bridge edges incident with <italic>x</italic> or <italic>y</italic>, and which,</p></list-item>
<list-item><p>on the path from a vertex in <italic>X</italic>, first visit the incident chain vertex and then the incident net vertex.</p></list-item>
</list>
<statement><label>Lemma 4.</label>
<p><italic>For a chain pair or bridge pair</italic> &#x007B;<italic>x</italic>, <italic>y</italic>&#x007D; in <italic>B</italic>(<italic>D</italic>) <italic>the set of contained snarls is equal to its contained chain pairs.</italic></p>
<p><italic>Proof.</italic> Let <italic>X</italic> be the component of <italic>C</italic>(<italic>D</italic>) containing the projection of <italic>x</italic> and <italic>y</italic> after the deletion of the projection of the black edges incident with <italic>x</italic> and <italic>y</italic>. From Theorem 1 and given that homomorphisms preserve connectedness, it follows that the vertex induced subgraph in <italic>B</italic>(<italic>D</italic>) of vertices that project to a vertex in <italic>X</italic> is the separated component of <italic>x</italic> and <italic>y</italic>. It follows that only snarls whose separated components&#x2019; vertex projections are contained in <italic>X</italic> can be contained in &#x007B;<italic>x</italic>,<italic>y</italic>&#x007D;. It is easily verified from the definitions that this is equal to the set of the contained chain pairs for &#x007B;<italic>x</italic>, <italic>y</italic>&#x007D;.</p>
</statement>
<statement><label>Theorem 2.</label>
<p><italic>A snarl</italic> &#x007B;<italic>x</italic>, <italic>y</italic>&#x007D; <italic>in B</italic>(<italic>D</italic>) <italic>is an ultrabubble iff its net graph and the net graph of each its contained chain pairs is acyclic and bridgeless</italic>.</p>
<p><italic>Proof.</italic> Follows from Lemmas 3 and 4.</p>
<p>Given Theorem 2 we now sketch an algorithm to compute the set of ultrabubbles for a given bidirected graph <italic>B</italic>(<italic>D</italic>):
<list list-type="order">
<list-item><p>Calculate <italic>C</italic>(<italic>D</italic>) (e.g. using the algorithm described in [<xref ref-type="bibr" rid="c1">1</xref>2]).</p></list-item>
<list-item><p>Calculate <italic>T</italic>(<italic>D</italic>).</p></list-item>
<list-item><p>For each chain pair label its chain edge in <italic>T</italic>(<italic>D</italic>) with whether the chain pair&#x2019;s net graph is acyclic and bridgeless.</p></list-item>
<list-item><p>For each chain pair, traversing from its chain edge in <italic>T</italic>(<italic>D</italic>), use depth first search to determine if its net graph and the net graph of each its contained chain pairs is acyclic and bridgeless, using the labels of the chain edges, and reporting the chain pair as an ultrabubble if so. (By recording if a chain pair is an ultrabubble as it is visited it is easily verified the complete traversal can be calculated by visiting each chain edge only once).</p></list-item>
<list-item><p>Calculate <italic>D</italic>(<italic>D</italic>).</p></list-item>
<list-item><p>For each vertex <italic>x</italic> in <italic>D</italic>(<italic>D</italic>) incident with exactly two edges let &#x007B;<italic>x</italic>&#x2032;, <italic>y</italic>&#x2032;&#x007D; be the bridge pair whose members project to <italic>x</italic> in <italic>D</italic>(<italic>D</italic>). (There can be at most &#x007C;<italic>E<sub>B</sub></italic><sub>(<italic>D</italic>)</sub>&#x007C; &#x2013; 1 such bridge pairs). Calculate if the net graph and the contained chain pairs of &#x007B;<italic>x</italic>, <italic>y</italic>&#x007D; are acyclic and bridgeless, reporting the bridge pair as an ultrabubble if true. (As an element in <italic>T</italic>(<italic>D</italic>) can be contained in at most one such bridge pair the cost for this step is <italic>O</italic>(&#x007C;<italic>V<sub>B</sub></italic><sub>(<italic>D</italic>)</sub>&#x007C; &#x002B; &#x007C;<italic>E<sub>B</sub></italic><sub>(<italic>D</italic>)</sub>&#x007C;) for all such bridge pairs).</p></list-item>
</list></p>
<p>The computational complexity of steps 1, 2, 4, 5 and 6 is less than or equal to <italic>O</italic>(&#x007C;<italic>V<sub>B</sub></italic><sub>(<italic>D</italic>)</sub>&#x007C; &#x002B; |<italic>E<sub>B</sub></italic><sub>(<italic>D</italic>)</sub>&#x007C;) &#x002B; &#x007C;<italic>E<sub>B</sub></italic><sub>(<italic>D</italic>)</sub>&#x007C;). For each chain vertex in step 3 the acyclicity of <italic>n</italic> net graphs is calculated, where <italic>n</italic> is the number of simple cycles incident with the vertex in <italic>C</italic>(<italic>D</italic>). In the worst case, this step has a complexity of <italic>O</italic>(&#x007C;<italic>E<sub>B</sub></italic><sub>(<italic>D</italic>)</sub>&#x007C;&#x007C;<italic>V<sub>B</sub></italic><sub>(<italic>D</italic>)</sub>&#x007C;), which occurs when all vertices in <italic>B</italic>(<italic>D</italic>) are 3-BEC. The cost of step 3 therefore dominates and the worst case complexity of the entire algorithm is <italic>O</italic>(&#x007C;<italic>E<sub>B</sub></italic><sub>(<italic>D</italic>)</sub>&#x007C;&#x007C;<italic>V<sub>B</sub></italic><sub>(<italic>D</italic>)</sub>&#x007C;). However, if the size of the largest net subgraph is bounded by a constant (which in practice it likely is) the expected running time will be linear in the size of graph.</p>
</statement>
</sec>
<sec id="s2g"><label>2.7</label><title>Rooted Cactus Trees, Ultrabubbles and Genetic Sites</title>
<p>One particularly attractive feature of superbubbles is that they have a nested containment relationship, so that a digraph is partitioned into a set of top level superbubble components and other graph members not contained in a superbubble component, and each top level superbubble component then contains one or more child superbubbles, forming a tree structure. The situation is more complex for snarls and ultrabubbles, in that the separated component of snarls can overlap (<xref ref-type="fig" rid="fig4">Fig. 4</xref>), such that each partially contains the other. To create a properly nested hierarchy of snarls it is therefore necessary to exclude some snarls.</p>
<p>Given Lemma 4, to define a hierarchy of snarls that are chain pairs it is sufficient to pick a chain vertex as the root in each component of the cactus forest (e.g. <xref ref-type="fig" rid="fig4">Fig. 4</xref>) and only including the chain pairs contained by the root chain, using the definition of chain pair containment defined above. Note that this naturally orients the cyclic chains of chain pairs, breaking them by the chosen chain edge nearest the root.</p>
<fig id="fig4" position="float"><label>Fig. 4.</label>
<caption><title>Overlapping snarls. (A) A bidirected graph, its corresponding (B) cactus graph and (C) cactus tree. The snarl numbered 2 contains the snarl numbered 4, similarly the snarl numbered 3 contains the snarl numbered 1. The snarls numbered 2 and 3 overlap. (D-E) Two possible rootings for the cactus tree are shown, each of which defines a properly nested set of snarls.</title>
</caption>
<graphic xlink:href="101493_fig4.tif"/></fig>
<p>Snarls that are bridge pairs are not naturally organized hierarchically. However, if the objective is to get a decomposition that contains the maximum number of ultrabubbles then the presence of bridge edges actually simplifies the problem, because a bridge edge cannot be contained within an ultrabubble. Hence if a biedged graph contains bridge edges, we can pick a subset of bridge pairs, and use each bridge pair to define a hierarchy of its contained chain pairs.</p>
<p>One of our motivations for investigating ultrabubbles was to define a decomposition of a bidirected graph representing genome variations into &#x2018;sites&#x2019;, groupings of paths representing subsequences into &#x2018;alleles&#x2019;, each representing an alternative at a particular location within a genome. Given a nesting of the ultrabubbles, we can envision that this nesting structure could play a powerful role in decomposing genotyping problems. This is illustrated in <xref ref-type="fig" rid="fig5">Fig. 5</xref>, which shows a bridge pair (arrows numbered 1) defining a <italic>top</italic>-<italic>level</italic> ultrabubble. Within this ultrabubble are a series of nested ultrabubbles and chains (<italic>second-level</italic> chain containing snarls numbered 2, 3 and 4 and a <italic>third</italic>-<italic>level</italic> ultrabubble numbered 5). In a genome problem, such a structure can easily arise with nested indels and substitutions. The genotype problem can be viewed as the problem of establishing a consistent genotype of each ultrabubble&#x2019;s net graph in a coordinated fashion.</p>
<fig id="fig5" position="float"><label>Fig. 5.</label>
<caption><title>(A) A biedged graph <italic>B</italic>(<italic>D</italic>) with nested ultrabubbles indicated by pairs of numbered arrows. (B) <italic>C</italic>(<italic>D</italic>) for <italic>B</italic>(<italic>D</italic>). (C) <italic>T</italic>(<italic>D</italic>) for <italic>B</italic>(<italic>D</italic>). (D-H) The net graphs for the ultrabubbles in <italic>B</italic>(<italic>D</italic>).</title>
</caption>
<graphic xlink:href="101493_fig5.tif"/></fig>
</sec>
</sec>
<sec id="s3"><label>3</label><title>Results</title>
<p>We implemented the ultrabubbles algorithm described above within the vg software package (<monospace><ext-link ext-link-type="uri" xlink:href="http://github.com/vgteam/vg">http://github.com/vgteam/vg</ext-link></monospace>), where it is used to decompose graphs into sites for variant calling. Ultrabubbles can also be computed directly by running <monospace>vg stats -u</monospace>. To root the decomposition we picked the largest top-level chain, which consists of bridge pairs. Here we present the results of running this decomposition on a graph for human chromosome 1 constructed from the (roughly 6.5 million) variant calls from phase 3 of the 1000 Genomes Project [<xref ref-type="bibr" rid="c5">5</xref>]. The graph contained 19, 917, 881 nodes and 26, 782, 661 edges and the runtime was 23 minutes using a maximum of 49G RAM on a single 2.27GHz Intel Xeon core (4 minutes and 30G of RAM were spent loading the graph into memory, a process that can be made an order of magnitude more efficient by switching the implementation to use xg, vg&#x2019;s succinct representation).</p>
<p><xref ref-type="table" rid="tbl1">Table 1</xref> shows the relative proportion of each of these structures. The first three rows describe the top-level ultrabubble decomposition, which covers exactly every base in the input graph. The second three rows display the same statistics but for structures that are entirely contained within top-level ultrabubbles or snarls. The remaining rows describe the third and deepest nesting level, which is contained within second level ultrabubbles or snarls. Every base within the graph is part of either a top level chain, ultrabubble or snarl in this decomposition.</p>
<table-wrap id="tbl1" position="float"><label>Table 1.</label>
<caption><p>Coverage statistics for the ultrabubble decomposition of the human chromosome 1 variant graph.</p></caption>
<graphic xlink:href="101493_tbl1.tif"/>
</table-wrap>
<p><xref ref-type="fig" rid="fig6">Figure 6</xref> shows the size distribution of the top-level ultrabubble and snarl sizes. All but 22 top-level ultrabubbles (totaling 3,251 bases) are 100 bases long or shorter. If we consider such sites &#x201C;easy&#x201D; to call, along with top-level chains, then we can assign roughly 91.5&#x0025; of chromosome 1 into this category. <xref ref-type="fig" rid="fig7">Figure 7</xref> displays three examples of such small ultrabubbles. The remaining 9.5&#x0025; of cases are found in a small number of relatively large snarls.</p>
<fig id="fig6" position="float"><label>Fig. 6.</label>
<caption><title>Histograms of top-level ultrabubble and snarl sizes in number of bases, as found in the 1000 Genomes graph for chromosome 1.</title>
</caption>
<graphic xlink:href="101493_fig6.tif"/></fig>
<fig id="fig7" position="float"><label>Fig. 7.</label>
<caption><title>Ultrabubbles found in the 1000 Genomes-derived graph for chromosome 1. (A) Two adjacent SNPs inside a deletion (chr1:209,887,366). (B) A more complex combination of SNP and indel events (chr1:237,977,845). (C) Copy number changes in a GT repeat (chr1:1,200,943).</title></caption>
<graphic xlink:href="101493_fig7.tif"/></fig>
<sec id="s4"><label>4</label><title>Discussion and Conclusion</title>
<p>We have presented a partial decomposition of a bidirected graph into a set of nested snarls and ultrabubbles. We believe this solves an important problem in using graphs for representing arbitrary genetic variations by defining a decomposition that determines sites and alleles.</p>
<p>As the decomposition is only partial, not all elements in a graph will necessarily fit into one of the ultrabubbles. However, we demonstrate that for an existing large library of variation (1000 Genomes) the large majority of sites are either invariant or described by simple, top-level ultrabubbles.</p>
<p>For bases outside of these easy sites it is possible to imagine further subclassification. For example, classifying snarls that contain tips but are acyclic might define a useful class of subgraph common in some subproblems (e.g. sequence assembly). Similarly, characteristic structures representing genomic phenomina, such as inversions and translocations, are imaginable. Beyond our initial investigation, a more thorough evaluation of how much of a graph fits within a snarl, ultrabubble, or one of these more complex structures would be a useful exercise.</p>
<p>As an alternative to further subclassification, in the context of assembly, various error correction algorithms have been proposed to remove graph elements and reduce the complexity of the graph, and therefore correspondingly increase the fraction of the graph that is contained within an ultrabubble structure. We foresee the cactus graph structure providing a useful basis for exploring such algorithms.</p>
</sec>
</sec>
</body>
<back>
<ack><label>5</label><title>Acknowledgements</title>
<p>This work was supported by the National Human Genome Research Institute of the National Institutes of Health under Award Number 5U54HG007990 and grants from the W.M. Keck foundation and the Simons Foundation. The content is solely the responsibility of the authors and does not necessarily represent the official views of the National Institutes of Health.</p>
</ack>
<app-group>
<app id="app1"><label>1</label><title>Appendix</title>
<statement><label>Lemma 5.</label>
<p><italic>A pair of vertices x</italic>, <italic>y are in the same component of B</italic>(<italic>D</italic>) <italic>iff their projections are in the same component of C</italic>(<italic>D</italic>).</p>
<p><italic>Proof</italic>. IF: Follows given that by definition no pair of vertices not connected in <italic>B</italic>(<italic>D</italic>) project to the same vertex in <italic>C</italic>(<italic>D</italic>). ONLY IF: Follows given that <italic>a<sub>C</sub></italic><sub>(<italic>D</italic>)</sub> is a graph homomorphism from <italic>B</italic>(<italic>D</italic>) to <italic>C</italic>(<italic>D</italic>) and graph homomorphisms preverse connectedness.</p>
</statement>
<statement><label>Lemma 6.</label>
<p><italic>For a subset of edges X</italic> &#x2282; <italic>E<sub>B</sub></italic><sub>(<italic>D</italic>)</sub>, <italic>if the removal of the projection of X disconnects C</italic>(<italic>D</italic>), <italic>then the removal of X disconnects B</italic>(<italic>D</italic>).</p>
<p><italic>Proof</italic>. Follows given that graph homomorphisms preverse connectedness.</p>
</statement>
<statement><label>Lemma 7.</label>
<p><italic>The vertices in C</italic>(<italic>D</italic>) <italic>are the equivalence classes of 3-BEC in B</italic>(<italic>D</italic>).</p>
<p><italic>Proof</italic>. Each pair of vertices <italic>B</italic>(<italic>D</italic>) that project to the same vertex in <italic>C</italic>(<italic>D</italic>) are either/or-both connected by a path of grey edges (and hence 3-BEC) or connected by at least three black-edge-disjoint paths (using Menger&#x2019;s theorem).</p>
</statement>
<statement><label>Lemma 8.</label>
<p><italic>A black edge in B</italic>(<italic>D</italic>) <italic>is a bridge edge iff its projection in C</italic>(<italic>D</italic>) <italic>is a bridge edge</italic>.</p>
<p><italic>Proof</italic>. Let <italic>e</italic> &#x003D; &#x007B;<italic>x</italic>,<italic>x</italic>&#x0302;&#x007D; &#x2208; <italic>E<sub>B</sub></italic><sub>(<italic>D</italic>)</sub></p>
<p>ONLY IF: Suppose <italic>e</italic> is a bridge. As <italic>e</italic> is a bridge the vertices <italic>X</italic>&#x2032; reachable from <italic>x</italic> without visiting <italic>x</italic>&#x0302; are black edge connected only by <italic>e</italic> to the vertices <italic>x</italic>&#x2032; reachable from <italic>x</italic>&#x2032; without visiting <italic>x</italic>. Given Lemma 7, it follows that the projection of <italic>X</italic> and the projection of <italic>X</italic>&#x2032; are disjoint, therefore the projection of <italic>e</italic> is a bridge.</p>
<p>IF: Suppose <italic>e</italic> is not a bridge but its projection is. By definition there exists a path in <italic>B</italic>(<italic>D</italic>) from <italic>x</italic> to <italic>x</italic>&#x2032; that does not include e. As <italic>a<sub>C</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>x</italic>) is a homomorphism, the projection of that path connects <italic>a<sub>C</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>x</italic>&#x2032;) and <italic>a<sub>C</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>x</italic>)without traversing <italic>b<sub>C</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>x</italic>) implying that it is not a bridge, a contradiction.</p>
</statement>
<statement><label>Lemma 9.</label>
<p><italic>A maximal set of vertices in C</italic>(<italic>D</italic>) <italic>is 2-EC iff the union of its members is a 2-BEC equivalence class of vertices in B</italic>(<italic>D</italic>).</p>
<p><italic>Proof</italic>. Delete the black bridge edges in <italic>B</italic>(<italic>D</italic>) and the bridge edges in <italic>C</italic>(<italic>D</italic>)&#x2032;, respectively. Each component is <italic>B</italic>(<italic>D</italic>)&#x2032; is, by definition 2-BEC, and similarly each component in <italic>C</italic>(<italic>D</italic>)&#x2032; is 2-EC. The proof follows from Lemmas 5 and 8, by showing there exists a bijection between components in <italic>B</italic>(<italic>D</italic>)&#x2032; and <italic>C</italic>(<italic>D</italic>)&#x2032; such that for each component <italic>X</italic> in <italic>B</italic>(<italic>D</italic>)&#x2032; all the vertices in <italic>X</italic> project to vertices in the same component in <italic>C</italic>(<italic>D</italic>)&#x2032;.</p>
<p>A <italic>cut pair</italic> is a pair of edges whose deletion disconnects the graph.</p>
</statement>
<statement><label>Lemma 10.</label>
<p><italic>A pair of edges in a 2-EC component of a cactus graph is a cut pair iff both edges are contained within the same simple cycle</italic>.</p>
<p><italic>Proof</italic>. By definition, a 2-EC component of a cactus graph is a set of simple cycles connected by articulation (cut) vertices. It is easily verified that the such a graph is and can only be disconnected by a pair of edges if they occur within one such simple cycle.</p>
</statement>
<statement><label>Lemma 11.</label>
<p><italic>A pair of black edges</italic> (<italic>d</italic>, <italic>e</italic>) <italic>in a 2-BEC component X of B</italic>(<italic>D</italic>) <italic>is a cut pair iff its projection is a cut pair in C</italic>(<italic>D</italic>).</p>
<p><italic>Proof</italic>. Let <italic>X</italic>&#x2032; be a vertex induced subgraph of the projection of <italic>X</italic>. By Lemma 9, <italic>X</italic>&#x2032; is a 2-EC component in <italic>C</italic>(<italic>D</italic>).</p>
<p>IF: If the deletion of the projection of <italic>d</italic> and <italic>e</italic> disconnects <italic>X</italic>&#x2032; then, using Lemma 6, the deletion of <italic>d</italic> and <italic>e</italic> disconnects <italic>X</italic>.</p>
<p>ONLY IF: If the projection of <italic>d</italic> and <italic>e</italic> are not a cut pair, by the definition of a cactus graph and Lemma 10 the projection of <italic>d</italic> and <italic>e</italic> in <italic>x</italic>&#x2032; are each members of two distinct simple cycles. If the projection of <italic>d</italic> (similarly <italic>e</italic>) were a self loop then its endpoints are 3-BEC, implying that after the deletion of <italic>d</italic> and <italic>e</italic> its endpoints remain connected. This is impossible if the deletion of <italic>d</italic> and <italic>e</italic> disconnect the 2-EC component, hence each simple cycle containing the projection of <italic>d</italic> or <italic>e</italic> has length greater than one. For any pair of distinct vertices <italic>x</italic>, <italic>y</italic> in <italic>B</italic>(<italic>D</italic>) that project to the same vertex in <italic>C</italic>(<italic>D</italic>), there exists a path in <italic>B</italic>(<italic>D</italic>) that connects them that excludes their incident black edges, because by Lemma 7 they are 3-BEC, and are therefore either connected by a path of grey edges or, by Menger&#x2019;s theorem, connected by at least three edge disjoint paths containing black edges. From this observation it is easily verified that the endpoints of <italic>d</italic> (and similarly <italic>e</italic>) must be connected by a path <italic>Y</italic> in <italic>B</italic>(<italic>D</italic>) that includes the black edges that project to the simple cycle containing <italic>d</italic>, in the order of the cycle, and which excludes both <italic>d</italic> and <italic>e</italic>. This implies the endpoints of <italic>d</italic> (similarly <italic>e</italic>) remain connected after the deletion of <italic>d</italic> and <italic>e</italic>, contradicting the claim they are a cut pair.</p>
</statement>
</app>
</app-group>
<app-group>
<app id="app2"><label>2</label><title>Appendix</title>
<statement><label>Lemma 12.</label>
<p><italic>Each snarl</italic> &#x007B;<italic>x</italic>,<italic>y</italic>&#x007D; in <italic>B</italic>(<italic>D</italic>) <italic>is either a chain pair or bridge pair</italic>.</p>
<p><italic>Proof</italic>. Using Lemma 5, both <italic>x</italic> and <italic>y</italic> must project to a vertex in the same component of <italic>C</italic>(<italic>D</italic>) as they are connected in <italic>B</italic>(<italic>D</italic>).</p>
<p>Let <italic>d</italic> and <italic>e</italic> be the black edges incident with <italic>x</italic> and <italic>y</italic>, respectively. If <italic>d</italic> is a bridge then <italic>e</italic> must be a bridge, or else by definition <italic>e</italic> connects two vertices in a 2-EC component <italic>X</italic>, the removal of <italic>d</italic> and <italic>e</italic> cannot therefore disconnect <italic>X</italic>, and therefore <italic>y</italic>; and <italic>y</italic>&#x0302;, violating the snarl separation criteria. Using Lemma 8, in this case the projections of <italic>d</italic> and <italic>e</italic> must therefore also be bridges. If <italic>d</italic> and <italic>e</italic> are both bridge edges but <italic>x</italic> and <italic>y</italic> do not project to the same vertex in <italic>C</italic>(<italic>D</italic>) (and are therefore not a bridge pair) there exists an intermediate bridge edge <italic>b<sub>D</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>z</italic>,<italic>z</italic>&#x0302;) on the path between <italic>a<sub>D</sub></italic><sub>(<italic>X</italic>)</sub>(<italic>x</italic>) and <italic>a<sub>D</sub></italic><sub>(<italic>X</italic>)</sub>(<italic>y</italic>). The deletion <italic>d</italic>, <italic>e</italic> and &#x007B;<italic>z</italic>, <italic>z</italic>&#x0302;&#x007D; for <italic>B</italic>(<italic>D</italic>) disconnects <italic>B</italic>(<italic>D</italic>) into distinct components, one contains <italic>x</italic> and <italic>z</italic>, one contains <italic>z</italic>&#x0302; and <italic>y</italic>, one contains <italic>x</italic>&#x0302; and one contains <italic>y</italic>&#x0302;. This implies &#x007B;<italic>x</italic>, <italic>z</italic>&#x007D; and &#x007B;<italic>z</italic>&#x0302;,<italic>y</italic>&#x007D; each fufill the separation criteria, contradicting the minimality of &#x007B;<italic>x</italic>,<italic>y</italic>&#x007D;.</p>
<p>If <italic>d</italic> and <italic>e</italic> are not bridges both must be in the same 2-BEC component or contradict the separation criteria, by the same reasoning as earlier. In this case, Lemma 9 implies both <italic>d</italic> and <italic>e</italic> must project edges in the same 2-EC component in <italic>C</italic>(<italic>D</italic>). Lemmas 10 and 11 further imply they must project to edges in the same simple cycle. If <italic>x</italic> and <italic>y</italic> do not project to the same vertex in <italic>C</italic>(<italic>D</italic>) (and are therefore not a chain pair) then there exists an intermediate black edge <italic>b<sub>C</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>z</italic>, <italic>z</italic>&#x0302;) on the path between <italic>a<sub>C</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>x</italic>) and <italic>a<sub>C</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>y</italic>) that excludes <italic>d<sub>D</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>x</italic>&#x0302;) and <italic>d<sub>D</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>y</italic>&#x0302;). As with the case that both <italic>d</italic> and <italic>e</italic> were bridge edges, this similarly contradicts the minimality of &#x007B; <italic>x</italic>, <italic>y</italic>&#x007D;.</p>
</statement>
<statement><label>Lemma 13.</label>
<p>Each chain pair or bridge pair &#x007B; <italic>x</italic>, <italic>y</italic>&#x007D; in <italic>B</italic>(<italic>D</italic>) <italic>is a snarl</italic>.</p>
<p><italic>Proof.</italic> Lemmas 6 and 10 imply that &#x007B;<italic>x</italic>, <italic>y</italic>&#x007D; meet the separation criteria. It remains to prove that &#x007B;<italic>x</italic>, <italic>y</italic>&#x007D; is minimal. If &#x007B;<italic>x</italic>, <italic>y</italic>&#x007D; is not minimal then there must exist an intermediate edge <italic>b<sub>C</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>z</italic>, <italic>z</italic>&#x0302;) on a path between <italic>a<sub>C</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>x</italic>) and <italic>a<sub>C</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>y</italic>) that excludes <italic>d<sub>C</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>x</italic>&#x0302;) and <italic>d<sub>C</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>y</italic>&#x0302;), and which, using Lemma 12, forms chain or bridge pairs with <italic>a<sub>C</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>y</italic>)(<italic>x</italic>) and <italic>a<sub>C</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>y</italic>). As <italic>a<sub>C</sub></italic><sub>(<italic>D</italic>)</sub> (<italic>x</italic>) &#x003D;<italic>a<sub>C</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>y</italic>) if &#x007B;<italic>x</italic>,<italic>y</italic>&#x007D; is a chain pair, or <italic>a<sub>D</sub></italic><sub>(<italic>D</italic>)</sub> (<italic>x</italic>) &#x003D; <italic>a<sub>D</sub></italic><sub>(<italic>D</italic>)</sub>(<italic>y</italic>) if &#x007B;<italic>x</italic>,<italic>y</italic>&#x007D; is a bridge pair, this is clearly impossible.</p>
</statement>
</app>
</app-group>
<ref-list><title>References</title>
<ref id="c1"><label>1.</label><mixed-citation publication-type="journal"><string-name><surname>Alekseyev</surname>, <given-names>M.A.</given-names></string-name>, <string-name><surname>Pevzner</surname>, <given-names>P.A.</given-names></string-name>: <source>Breakpoint graphs and ancestral genome reconstructions</source> <volume>19</volume>(<issue>5</issue>), <fpage>943</fpage>&#x2013;<lpage>957</lpage> (May <year>2009</year>), <ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/cgi/content/abstract/19/5/943">http://genome.cshlp.org/cgi/content/abstract/19/5/943</ext-link></mixed-citation></ref>
<ref id="c2"><label>2.</label><mixed-citation publication-type="book"><string-name><surname>Birmel&#x0065;</surname>, <given-names>E.</given-names></string-name>, <string-name><surname>Crescenzi</surname>, <given-names>P.</given-names></string-name>, <string-name><surname>Ferreira</surname>, <given-names>R.</given-names></string-name>, <string-name><surname>Grossi</surname>, <given-names>R.</given-names></string-name>, <string-name><surname>Lacroix</surname>, <given-names>V.</given-names></string-name>, <string-name><surname>Marino</surname>, <given-names>A.</given-names></string-name>, <string-name><surname>Pisanti</surname>, <given-names>N.</given-names></string-name>, <string-name><surname>Sacomoto</surname>, <given-names>G.</given-names></string-name>, <string-name><surname>Sagot</surname>, <given-names>M.F.</given-names></string-name>: <chapter-title>Efficient bubble enumeration in directed graphs</chapter-title>. In: <person-group person-group-type="editor"><string-name><surname>Calder&#x00F3;n-Benavides</surname>, <given-names>L.</given-names></string-name>, <string-name><surname>Gonz&#x00E1;lez-Caro</surname>, <given-names>C.</given-names></string-name>, <string-name><surname>Ch&#x00E1;vez</surname>, <given-names>E.</given-names></string-name>, <string-name><surname>Ziviani</surname>, <given-names>N.</given-names></string-name></person-group> (eds.) <source>String Processing and Information Retrieval: 19th International Symposium, SPIRE 2012, Cartagena de Indias, Colombia, October 21-25, 2012</source>. Proceedings. pp. <fpage>118</fpage>&#x2013;<lpage>129</lpage>. <publisher-name>Springer Berlin Heidelberg</publisher-name>, <publisher-loc>Berlin, Heidelberg</publisher-loc> (<year>2012</year>), <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1007/978-3-642-34109-0&#x005F;13">http://dx.doi.org/10.1007/978-3-642-34109-0&#x005F;13</ext-link></mixed-citation></ref>
<ref id="c3"><label>3.</label><mixed-citation publication-type="other"><string-name><surname>Brankovic</surname>, <given-names>L.</given-names></string-name>, <string-name><surname>Iliopoulos</surname>, <given-names>C.S.</given-names></string-name>, <string-name><surname>Kundu</surname>, <given-names>R.</given-names></string-name>, <string-name><surname>Mohamed</surname>, <given-names>M.</given-names></string-name>, <string-name><surname>Pissis</surname>, <given-names>S.P.</given-names></string-name>, <string-name><surname>Vayani</surname>, <given-names>F.</given-names></string-name>: <article-title>Linear-time superbubble identification algorithm for genome assembly</article-title>. <source>Theoretical Computer Science</source> pp. - (May <year>2015</year>), <ext-link ext-link-type="uri" xlink:href="http://linkinghub.elsevier.com/retrieve/pii/S0304397515009147">http://linkinghub.elsevier.com/retrieve/pii/S0304397515009147</ext-link></mixed-citation></ref>
<ref id="c4"><label>4.</label><mixed-citation publication-type="journal"><string-name><surname>de Bruijn</surname>, <given-names>N.G.</given-names></string-name>: <article-title>A Combinatorial Problem</article-title>. <source>Koninklijke Nederlandse Akademie v. Wetenschappen</source> <volume>1</volume>(<issue>49</issue>), <fpage>758</fpage>&#x2013;<lpage>764</lpage> (<year>1946</year>)</mixed-citation></ref>
<ref id="c5"><label>5.</label><mixed-citation publication-type="journal"><string-name><surname>Consortium</surname>, <given-names>G.P.</given-names></string-name>, <etal>et al.</etal>: <article-title>A global reference for human genetic variation</article-title>. <source>Nature</source> <volume>526</volume>(<issue>7571</issue>), <fpage>68</fpage>&#x2013;<lpage>74</lpage> (<year>2015</year>)</mixed-citation></ref>
<ref id="c6"><label>6.</label><mixed-citation publication-type="book"><string-name><surname>Edmonds</surname>, <given-names>J.</given-names></string-name>, <string-name><surname>Johnson</surname>, <given-names>E.L.</given-names></string-name>: <source>Matching: A Well-Solved Class of Integer Linear Programs</source>. pp. <fpage>27</fpage>&#x2013;<lpage>30</lpage>. <publisher-name>Springer Berlin Heidelberg</publisher-name>, <publisher-loc>Berlin, Heidelberg</publisher-loc> (Jan <year>1970</year>), <ext-link ext-link-type="uri" xlink:href="http://www.springerlink.com/index/10.1007/3-540-36478-1&#x005F;3">http://www.springerlink.com/index/10.1007/3-540-36478-1&#x005F;3</ext-link></mixed-citation></ref>
<ref id="c7"><label>7.</label><mixed-citation publication-type="journal"><string-name><surname>Harary</surname>, <given-names>F.</given-names></string-name>, <string-name><surname>Uhlenbeck</surname>, <given-names>G.E.</given-names></string-name>: <source>On the Number of Husimi Trees: I. Proceedings of the National Academy of Sciences of the United States of America</source> <volume>39</volume>(<issue>4</issue>), <fpage>315</fpage>&#x2013;<lpage>322</lpage> (Apr <year>1953</year>), <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/sites/entrez?Db&#x003D;pubmed&#x0026;Cmd&#x003D;Retrieve&#x0026;list&#x005F;uids&#x003D;16589268&#x0026;dopt&#x003D;abstractplus">http://www.ncbi.nlm.nih.gov/sites/entrez?Db&#x003D;pubmed&#x0026;Cmd&#x003D;Retrieve&#x0026;list&#x005F;uids&#x003D;16589268&#x0026;dopt&#x003D;abstractplus</ext-link></mixed-citation></ref>
<ref id="c8"><label>8.</label><mixed-citation publication-type="book"><string-name><surname>Iliopoulos</surname>, <given-names>C.S.</given-names></string-name>, <string-name><surname>Kundu</surname>, <given-names>R.</given-names></string-name>, <string-name><surname>Mohamed</surname>, <given-names>M.</given-names></string-name>, <string-name><surname>Vayani</surname>, <given-names>F.</given-names></string-name>: <source>Popping Superbubbles and Discovering Clumps: Recent Developments in Biological Sequence Analysis</source>. pp. <fpage>3</fpage>&#x2013;<lpage>14</lpage>. <publisher-name>Springer International Publishing, Cham</publisher-name> (<year>2016</year>), <ext-link ext-link-type="uri" xlink:href="http://link.springer.com/10.1007/978-3-319-30139-6&#x005F;1">http://link.springer.com/10.1007/978-3-319-30139-6&#x005F;1</ext-link></mixed-citation></ref>
<ref id="c9"><label>9.</label><mixed-citation publication-type="journal"><string-name><surname>Medvedev</surname>, <given-names>P.</given-names></string-name>, <string-name><surname>Brudno</surname>, <given-names>M.</given-names></string-name>: <article-title>Maximum likelihood genome assembly</article-title>. <source>Journal of computational biology: a journal of computational molecular cell biology</source> <volume>16</volume>(<issue>8</issue>), <fpage>1101</fpage>&#x2013;<lpage>1116</lpage> (Aug <year>2009</year>), <ext-link ext-link-type="uri" xlink:href="http://www.liebertonline.com/doi/abs/10.1089/cmb.2009.0047">http://www.liebertonline.com/doi/abs/10.1089/cmb.2009.0047</ext-link></mixed-citation></ref>
<ref id="c10"><label>10.</label><mixed-citation publication-type="journal"><string-name><surname>Myers</surname>, <given-names>E.W.</given-names></string-name>: <article-title>The fragment assembly string graph</article-title>. <source>Bioinformatics (Oxford, England)</source> <volume>21</volume> <issue>Suppl 2</issue>, <fpage>ii79</fpage>&#x2013;<lpage>85</lpage> (Sep <year>2005</year>), <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/content/21/suppl&#x005F;2/ii79.long">http://bioinformatics.oxfordjournals.org/content/21/suppl&#x005F;2/ii79.long</ext-link></mixed-citation></ref>
<ref id="c11"><label>11.</label><mixed-citation publication-type="other"><string-name><surname>Onodera</surname>, <given-names>T.</given-names></string-name>, <string-name><surname>Sadakane</surname>, <given-names>K.</given-names></string-name>, <string-name><surname>Shibuya</surname>, <given-names>T.</given-names></string-name>: <chapter-title>Detecting superbubbles in assembly graphs</chapter-title>. In: <source>Algorithms in bioin-formatics</source>, pp. <fpage>338</fpage>&#x2013;<lpage>348</lpage>. <publisher-name>Springer</publisher-name>, <publisher-loc>Heidelberg, Berlin, Heidelberg</publisher-loc> (<year>2013</year>), <ext-link ext-link-type="uri" xlink:href="http://link.springer.com/10.1007/978-3-642-40453-5&#x005F;26">http://link.springer.com/10.1007/978-3-642-40453-5&#x005F;26</ext-link></mixed-citation></ref>
<ref id="c12"><label>12.</label><mixed-citation publication-type="journal"><string-name><surname>Paten</surname>, <given-names>B.</given-names></string-name>, <string-name><surname>Diekhans</surname>, <given-names>M.</given-names></string-name>, <string-name><surname>Earl</surname>, <given-names>D.</given-names></string-name>, <string-name><surname>John</surname>, <given-names>J.S.</given-names></string-name>, <string-name><surname>Ma</surname>, <given-names>J.</given-names></string-name>, <string-name><surname>Suh</surname>, <given-names>B.</given-names></string-name>, <string-name><surname>Haussler</surname>, <given-names>D.</given-names></string-name>: <article-title>Cactus graphs for genome comparisons</article-title>. <source>Journal of computational biology: a journal of computational molecular cell biology</source> <volume>18</volume>(<issue>3</issue>), <fpage>469</fpage>&#x2013;<lpage>481</lpage> (Mar <year>2011</year>), <ext-link ext-link-type="uri" xlink:href="http://eutils.ncbi.nlm.nih.gov/entrez/eutils/elink.fcgi?dbfrom&#x003D;pubmed&#x0026;id&#x003D;21385048&#x0026;retmode&#x003D;ref&#x0026;cmd&#x003D;prlinks">http://eutils.ncbi.nlm.nih.gov/entrez/eutils/elink.fcgi?dbfrom&#x003D;pubmed&#x0026;id&#x003D;21385048&#x0026;retmode&#x003D;ref&#x0026;cmd&#x003D;prlinks</ext-link></mixed-citation></ref>
<ref id="c13"><label>13.</label><mixed-citation publication-type="journal"><string-name><surname>Pevzner</surname>, <given-names>P.A.</given-names></string-name>, <string-name><surname>Tang</surname>, <given-names>H.</given-names></string-name>, <string-name><surname>Waterman</surname>, <given-names>M.S.</given-names></string-name>: <article-title>An Eulerian path approach to DNA fragment assembly</article-title>. <source>Proceedings of the National Academy of Sciences of the United States of America</source> <volume>98</volume>(<issue>17</issue>), <fpage>9748</fpage>&#x2013;<lpage>9753</lpage> (Aug <year>2001</year>), <ext-link ext-link-type="uri" xlink:href="http://www.pnas.org/cgi/content/full/98/17/9748">http://www.pnas.org/cgi/content/full/98/17/9748</ext-link></mixed-citation></ref>
<ref id="c14"><label>14.</label><mixed-citation publication-type="book"><string-name><surname>Pevzner</surname>, <given-names>P.</given-names></string-name>: <source>Computational Molecular Biology: An Algorithmic Approach</source>. <publisher-name>MIT Press</publisher-name> (Mar <year>2000</year>)</mixed-citation></ref>
<ref id="c15"><label>15.</label><mixed-citation publication-type="journal"><string-name><surname>Sung</surname>, <given-names>W.K.</given-names></string-name>, <string-name><surname>Sadakane</surname>, <given-names>K.</given-names></string-name>, <string-name><surname>Shibuya</surname>, <given-names>T.</given-names></string-name>, <string-name><surname>Belorkar</surname>, <given-names>A.</given-names></string-name>, <string-name><surname>Pyrogova</surname>, <given-names>I.</given-names></string-name>: <article-title>An O(m log m)-Time Algorithm for Detecting Superbubbles</article-title>. <source>IEEE/ACM transactions on computational biology and bioinformatics / IEEE, ACM</source> <volume>12</volume>(<issue>4</issue>), <fpage>770</fpage>&#x2013;<lpage>777</lpage> (Jan <year>2015</year>), <ext-link ext-link-type="uri" xlink:href="http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber&#x003D;6998850">http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber&#x003D;6998850</ext-link></mixed-citation></ref>
<ref id="c16"><label>16.</label><mixed-citation publication-type="journal"><string-name><surname>Zerbino</surname>, <given-names>D.R.</given-names></string-name>, <string-name><surname>Birney</surname>, <given-names>E.</given-names></string-name>: <article-title>Velvet: algorithms for de novo short read assembly using de Bruijn graphs</article-title>. <source>Genome Research</source> <volume>18</volume>(<issue>5</issue>), <fpage>821</fpage>&#x2013;<lpage>829</lpage> (May <year>2008</year>), <ext-link ext-link-type="uri" xlink:href="http://www.genome.org/cgi/content/full/18/5Z821">http://www.genome.org/cgi/content/full/18/5Z821</ext-link></mixed-citation></ref>
</ref-list>
</back>
</article>