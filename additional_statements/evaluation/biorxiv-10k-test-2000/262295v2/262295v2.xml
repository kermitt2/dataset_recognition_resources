<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.2d1 20170631//EN" "JATS-archivearticle1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" article-type="article" dtd-version="1.2d1" specific-use="production" xml:lang="en">
<front>
<journal-meta>
<journal-id journal-id-type="publisher-id">BIORXIV</journal-id>
<journal-title-group>
<journal-title>bioRxiv</journal-title>
<abbrev-journal-title abbrev-type="publisher">bioRxiv</abbrev-journal-title>
</journal-title-group>
<publisher>
<publisher-name>Cold Spring Harbor Laboratory</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="doi">10.1101/262295</article-id>
<article-version>1.2</article-version>
<article-categories>
<subj-group subj-group-type="author-type">
<subject>Regular Article</subject>
</subj-group>
<subj-group subj-group-type="heading">
<subject>New Results</subject>
</subj-group>
<subj-group subj-group-type="hwp-journal-coll">
<subject>Genomics</subject>
</subj-group>
</article-categories>
<title-group>
<article-title>AnoniMME: Bringing Anonymity to the Matchmaker Exchange Platform for Rare Disease Gene Discovery</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<name>
<surname>Oprisanu</surname>
<given-names>Bristena</given-names>
</name>
</contrib>
<contrib contrib-type="author">
<name>
<surname>De Cristofaro</surname>
<given-names>Emiliano</given-names>
</name>
</contrib>
<aff><institution>University College London</institution>, <email>bristena.oprisanu.10@ucl.ac.uk</email>, <email>e.decristofaro@ucl.ac.uk</email></aff>
</contrib-group>
<pub-date pub-type="epub">
<year>2018</year>
</pub-date>
<elocation-id>262295</elocation-id>
<history>
<date date-type="received">
<day>08</day>
<month>2</month>
<year>2018</year>
</date>
<date date-type="rev-recd">
<day>13</day>
<month>2</month>
<year>2018</year>
</date>
<date date-type="accepted">
<day>13</day>
<month>2</month>
<year>2018</year>
</date>
</history><permissions><copyright-statement>&#x00A9; 2018, Posted by Cold Spring Harbor Laboratory</copyright-statement>
<copyright-year>2018</copyright-year><license license-type="creative-commons" xlink:href="http://creativecommons.org/licenses/by/4.0/"><license-p>This pre-print is available under a Creative Commons License (Attribution 4.0 International), CC BY 4.0, as described at <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link></license-p></license></permissions>
<self-uri xlink:href="262295.pdf" content-type="pdf" xlink:role="full-text"/>
<abstract><title>Abstract</title>
<p>Advances in genome sequencing and genomics research are bringing us closer to a new era of personalized medicine, where healthcare can be tailored to the individual&#x2019;s genetic makeup, and to more effective diagnosis and treatment of rare genetic diseases. Much of this progress depends on collaborations and access to genomes, thus, a number of initiatives have been introduced to support seamless data sharing. Among these, the Global Alliance for Genomics and Health runs a popular platform, called Matchmaker Exchange, that allows researchers to perform queries for rare genetic disease discovery over multiple federated databases. Queries include gene variations which are linked to rare diseases, and the ability to find other researchers that have seen or have interest in those variations is extremely valuable. Nonetheless, in some cases, researchers may be reluctant to use the platform since the queries they make (thus, what they are working on) are revealed to other researchers, and this creates concerns with privacy and competitive advantage.</p>
<p>In this paper, we present AnoniMME, a novel framework geared to enable anonymous queries within the Matchmaker Exchange platform. We build on Reverse Private Information Retrieval (PIR) to let researchers anonymously query the federated platform, in a multi-server setting, by writing their query, along with a public encryption key, anonymously in a public database. AnoniMME also supports responses, allowing other researchers to respond to queries by providing their encrypted contact details.</p></abstract>
<counts>
<page-count count="10"/>
</counts>
</article-meta>
</front>
<body>
<sec id="s1">
<label>1</label>
<title>Introduction</title>
<p>Advances in genome sequencing and genomics are enabling tremendous progress in medicine and healthcare, paving the way to making prevention, diagnosis, and treatment of diseases tailored to the individual&#x2019;s genetic makeup, and thus cheaper and more effective. Researchers are also gaining a better understanding, and developing more successful treatments of rare genetic diseases. However, although over the past 15 years sequencing costs have plummeted from billions to thousands of dollars, and continue dropping &#x005B;<xref rid="c15" ref-type="bibr">15</xref>&#x005D;, it is still hard for researchers to gain access to genomic data, especially those pertaining to rare conditions.</p>
<p>Therefore, progress in genomics research hinges on the ability to collaborate and share data among different institutions. Indeed, funding agencies often require that data sharing is considered in grant applications, and a number of initiatives have been announced to gather and share genomic data. For instance, the All Of Us Research Program &#x005B;<xref rid="c16" ref-type="bibr">16</xref>&#x005D; (aka the Precision Medicine initiative) was kicked off in the US in 2015, aiming to collect health and genetic data from one million citizens. Similar initiatives exist elsewhere, e.g., in the UK, Genomics England is sequencing the genomes of 100,000 patients, focusing on rare diseases and cancer &#x005B;<xref rid="c9" ref-type="bibr">9</xref>&#x005D;.</p>
<p>The Global Alliance for Genomics and Health (GA4GH) was established a few years ago with the goal of making data sharing between institutes simple and effective &#x005B;<xref rid="c11" ref-type="bibr">11</xref>&#x005D;. The GA4GH has developed several platforms, e.g., the Beacon Project &#x005B;<xref rid="c4" ref-type="bibr">4</xref>&#x005D;, allowing researchers to search if a certain allele exists in a database hosted at a certain organization as well as the Matchmaker Exchange &#x005B;<xref rid="c17" ref-type="bibr">17</xref>&#x005D;, which facilitates rare disease discovery.</p>
<p>In this paper, we focus on Matchmaker Exchange (MME): the platform connects multiple distributed databases through an API and allows researchers to query for genetic variants in other databases in the network. In other words, MME acts as a portal supporting simultaneous querying over multiple databases that are members of the exchange. In a nutshell, MME allows a researcher to query a specific gene, e.g., &#x201C;AP3B2&#x201D; (a gene where rare mutations have been associated with early-onset epileptic encephalopathy). If a match is found, the researcher is notified of all matches within all databases in the MME, and can get in touch with the user that submitted the case on which a match is generated. Note that, querying a gene really implies querying a known rare variation of that gene. On the other hand, however, researchers might be reluctant to use the platform since the queries they make are revealed to other researchers, and this exposes what they are working on and what kinds of patients they might have, ultimately resulting in loss of privacy and competitive advantage. Indeed, MME currently requires researchers to submit a registration application to be given access to the platform, with the goal of preventing misuse of the system, thus, queries made on this platform are not anonymous and are revealed to all other researchers with an interest in the same gene.</p>
<p>This motivates the need to support <italic>anonymous querying</italic> on MME, so that a researcher&#x2019;s interest a gene is not broadcast, but only communicated to relevant contacts, i.e., researchers with same interests or willing to collaborate. To this end, we present AnoniMME, a novel framework allowing researchers to anonymously query a gene within the MME, without violating any of MME&#x2019;s current functionalities and requirements. We build AnoniMME using a cryptographic primitive called Reverse Private Information Retrieval (PIR), using a model similar to that presented by the anonymous messaging system Riposte &#x005B;<xref rid="c7" ref-type="bibr">7</xref>&#x005D;, while creating queries and implementing the same functionalities as in MME. By using Reverse Private Information Retrieval (PIR) as a building block, we allow researchers to anonymously query the federated platform, in a multi-server setting, by writing their query, along with a public encryption key, anonymously in a public database. AnoniMME also supports responses, allowing other researchers to respond to queries by providing their encrypted contact details.</p>
<p>Our intuition is to build queries in regular epochs, where the length of each epoch is based on the number of write requests. In order to anonymously write to the database, the user selects a random row of the the database, and splits the query, containing the gene and her public key, into shares, one for each server (which we denote as node servers). This way, the node servers cannot learn anything about the write request this way, if at least one of the them is honest. Then, a master server can gather queries that have been collected during an epoch from the node servers and collate them together to recover and publish the actual queries. The MME matching system can then be used in order to generate matches for the queries, in the usual manner and contact details of other researchers/clinicians can be exchanged, encrypted using the public key, and published in the same row as the queried gene, in an adjacent column.</p>
<p>To demonstrate the practicality of AnoniMME, we implement and evaluate our prototype experimentally. We do so in two different settings, one involving two node servers and a master server, and another involving six node servers (and a master server). In both settings, the nodes collect write requests during an epoch, and then forward them to the master server which collates them and publishes the final database.</p>
<sec id="s1a"><title>Contributions</title>
<p>In summary, our paper makes several contributions:
<list list-type="simple">
<list-item><label>1.</label><p>We present AnoniMME, a framework enabling anonymous queries within the Matchmaker Exchange, without breaking any of its current security and functionality requirements.</p></list-item>
<list-item><label>2.</label><p>We build AnoniMME from Reverse PIR &#x005B;<xref rid="c7" ref-type="bibr">7</xref>&#x005D;, using an information-theoretic approach, extending queries to support public key encryption of contact details, and adding a response phase so that users can also anonymously reply to queries.</p></list-item>
<list-item><label>3.</label><p>We show, experimentally, that AnoniMME is efficient and scalable, and can bring anonymity to MME with low overhead. Therefore, we are confident that it can be deployed in the wild and further encouraging researchers to share genomic data a.</p></list-item>
</list></p>
</sec>
<sec id="s1b"><title>Paper Organization</title>
<p>The rest of the paper is organized as follows. In <xref ref-type="sec" rid="s2">Section 2</xref>, we review the Matchmaker Exchange (MME) platform, we define the entities and operations of our goal system as well as the security model and present a first attempt at designing a privacy-enhancing protocol supporting the functionalities of MME, with a discussion of its limitations. <xref ref-type="sec" rid="s3">Section 3</xref> describe the methods used for collision handling and collision recovery, presents the <italic>n</italic>-server protocol, and evaluate the performance of the proposed protocol on the client side. In <xref ref-type="sec" rid="s4">Section 4</xref>, we discuss the results from the experimental evaluation, and place our protocol in the context of related work in <xref ref-type="sec" rid="s5">Section 5</xref>. Finally, we conclude the paper in <xref ref-type="sec" rid="s6">Section 6</xref>.</p>
</sec>
</sec>
<sec id="s2">
<label>2</label>
<title>Approach</title>
<sec id="s2a">
<label>2.1</label>
<title>Matchmaker Exchange</title>
<p>Genomics research is often dependent on resources that facilitate and encourage sharing of genomic data. To this end, the Global Alliance for Genomics and Health (GA4GH) was established in 2013, aiming to support simple mechanisms for sharing data between institutes. The GA4GH has developed and deployed various systems, including the Beacon Network project &#x005B;<xref rid="c4" ref-type="bibr">4</xref>&#x005D;, which allows researchers to search if a certain allele exists in a database, as well as the Matchmaker Exchange (MME) &#x005B;<xref rid="c17" ref-type="bibr">17</xref>&#x005D;, which facilitates rare disease gene discovery and constitutes the main focus of our work.</p>
<p>The MME is a federated platform that facilitate the identification of cases with similar phenotypic and genotypic profiles through a standardized Application Programming Interface (API). Essentially, it enables searches in multiple databases, without having to query all of them separately or deposit data in each of them. As of November 2017, it involves seven organizations with full member status and eight additional participant organizations.</p>
<p>The Matchmaker Exchange Application Programming Interface (MME API) &#x005B;<xref rid="c5" ref-type="bibr">5</xref>&#x005D; fully specifies the data format and the protocol for querying databases to identify individuals with similar phenotypic profiles and genetic variations. To ensure the accuracy of the patient comparison, similar phenotypes are determined by matching identical or ontologically similar with the Human Phenotype Ontology (HPO). The MME API also specifies the format of both the query, which is sent to participating databases (called &#x201C;matchmaking service&#x201D;) and the response, which contains information about matching individuals in the remote database. It is implemented under a query-byexample methodology: a user can query a specific gene, e.g., &#x201C;AP3B2,&#x201D; and she will be notified of all matches within all databases in the MME. Note that, querying a gene really implies querying a known rare variation of that gene. If a match is found, the user receives a Case ID for the match, information about the user that submitted the case on which a match is generated, such as name, institution and email address, as well as the corresponding candidate gene or phenotype.</p>
<p>In order to query the platform, users must be registered with one of the member databases, and have a clinician/researcher account. Some of the member databases allow for patient/family registrations as well, however the submissions made by these type of users are excluded from matching via MME, due to the current MME rules.</p>
<p>The query protocol is illustrated in <xref ref-type="fig" rid="fig1">Figure 1</xref>. A user, Bob, sends the metadata (i.e., Case ID, submitter information) as well as the patient data (gene and/or phenotype) to database B. Another user, Alice, submits a similar case to database A. Database A then sends an MME API match request to Database B, which performs the match and returns a list of scored patients plus metadata to database A. After receiving the match results, database A informs Alice, providing contact information for Bob. The result of querying MME presents a list of matches, where each match has a <italic>patient</italic> object, i.e., the information on the matched patient, consisting of the same information as described in the query, and a <italic>score</italic> object. The scoring of the patients is done according to how well the results patient matches the query patient; i.e., it is a numerical value and must be in the range &#x005B;0, 1&#x005D;, with 0.0 being a poor match and 1.0 being a perfect match.</p>
<fig id="fig1" position="float" fig-type="figure" orientation="portrait">
<label>Figure 1.</label>
<caption><p>Visual representation of a MME query sequence.</p></caption>
<graphic xlink:href="262295_fig1.tif"/>
</fig>
</sec>
<sec id="s2b">
<label>2.2</label>
<title>Entities and Operations</title>
<p>AnoniMME aims to support anonymous queries on the Matchmaker Exchange (MME). It involves the following entities:</p>
<sec id="s2b1">
<title>Querying Users</title>
<p>researchers/clinicians who query the system to find other users that have patients with a rare mutation or an interest in the same gene. As detailed below, they generate a write request specifying the row at which their query, i.e., the gene of interest and their public key, will be processed.</p>
</sec>
<sec id="s2b2">
<title>Responding Users</title>
<p>researchers/clinicians replying to an existing query. They use the public key of a querying user to encrypt their contact details and generate a write request for the same row as the gene of interest including their (encrypted) contact details.</p>
</sec>
<sec id="s2b3">
<title>Nodes</title>
<p>the servers collecting write requests from the users. These are aggregated until the end of an epoch, based on the maximum number of write requests.</p></sec>
<sec id="s2b4">
<title>Master Server</title>
<p>a server that gathers the databases from each node at the end of an epoch, and publishes the database with all the write requests revealed.</p>
<p>Therefore, AnoniMME implements the following operations:</p></sec>
<sec id="s2b5">
<title>Query Write Request</title>
<p>On input row <italic>i,</italic> query gene <italic>X</italic>, and public key <italic>PK</italic>, a querying user generates n write requests, one for each node. Each write request is generated by encoding the gene and the public key into n vectors, so that all of them combined will write the gene/public key at index <italic>i</italic>.</p>
<sec id="s2b6">
<title>Query Response Request</title>
<p>On input row <italic>i</italic>, encrypted contact details <italic>c</italic>, a responding user generates <italic>n</italic> write requests, one for each node. Write requests are generated, once again, by encoding the encrypted contact details into <italic>n</italic> vectors.</p>
</sec>
<sec id="s2b7">
<title>Database Collation</title>
<p>On input <italic>n</italic> databases, the master server collates them into one final database, and publishes it.</p>
</sec>
</sec>
</sec>
<sec id="s2c">
<label>2.3</label>
<title>Security Model</title>
<p>AnoniMME aims to guarantee the following three security goals.</p>
<p><bold>1.Correctness.</bold> When all nodes execute the protocols correctly and send data to the master server at the end of an epoch, the resulting database contains all the write requests processed as if the requests were directly applied to the final database.</p>
<p><bold>2.Anonymous Write.</bold> The probability that an adversary guesses at which particular row a user has written is the same as random guessing.</p>
<p><bold>3.Disruption Resistance.</bold> An adversary controlling n users can make at most n write requests (i.e., there is a limit to the number of write requests each user can make during an epoch).</p>
<sec id="s2c1">
<title>Threat Model</title>
<p>We assume that the users of the system are untrusted, and may collude with the nodes, the master server, or other users in order to break the security properties of the system. Both the master server and the nodes are trusted for availability, and assumed that at least one of the nodes is honest (i.e., does not collude with other nodes). We do not consider external adversaries, since their actions can be mitigated via standard network security techniques (i.e., using a secure and authenticated communication channel). Note that the security model of AnoniMME mirrors that of Riposte &#x005B;<xref rid="c7" ref-type="bibr">7</xref>&#x005D;.</p>
</sec>
</sec>
<sec id="s2d">
<label>2.4</label>
<title>A First Attempt</title>
<p>We now present a first attempt at designing a privacyenhancing protocol supporting the functionalities of the Matchmaker Exchange (MME), i.e., querying the federated platform to find patients with similar gene mutations or phenotypes. We discuss its limitations, some of which we address in the actual, N-server construction of AnoniMME presented in <xref ref-type="sec" rid="s3b">Section 3.2</xref>.</p>
<sec id="s2d1">
<title>Intuition</title>
<p>We start by attempting to build from a simple extension of Reverse PIR &#x005B;<xref rid="c7" ref-type="bibr">7</xref>&#x005D;. Specifically, we implement the query phase (cf. <xref ref-type="sec" rid="s2b">Section 2.2</xref>) using the same mechanism of Riposte &#x005B;<xref rid="c7" ref-type="bibr">7</xref>&#x005D;, i.e., we let users anonymously submit the gene of interest, along with their public key, with a &#x201C;write request.&#x201D; We then add a response phase, allowing users with an interest in the same gene to respond; specifically, by encrypting their contact information using the public key contained in the query, and adding it to another write request.</p>
</sec>
<sec id="s2d2">
<title>Setting</title>
<p>In the following, we present a construction assuming the presence of 2 servers (<italic>S</italic><sub>1</sub> and <italic>S</italic><sub>2</sub>) and a database with l rows.</p>
</sec>
<sec id="s2d3">
<title>Query phase</title>
<p>Assume user A wants to anonymously query gene <italic>X<sub>A</sub></italic>. She builds a write request, consisting of (<italic>X<sub>A</sub></italic>, <italic>PK<sub>A</sub></italic>), where <italic>PK<sub>A</sub></italic> is her public key, and writes this at row i in the database. More specifically, she picks 2<italic>l</italic> random numbers, <italic>r</italic><sub>1</sub>,<italic>r</italic><sub>2</sub>,&#x2026;, <italic>r</italic><sub>l</sub> and <italic>s</italic><sub>1</sub>,<italic>s</italic><sub>2</sub>,&#x2026;, <italic>s</italic><sub>l</sub>, where <italic>l</italic> is the size of the database. The query write request vectors are constructed as follows:</p>
<disp-formula id="eqn1"><alternatives><graphic xlink:href="262295_eqn1.gif"/></alternatives></disp-formula>
<p>Note that <italic>v</italic><sub>1</sub> &#x002B; <italic>v</italic><sub>2</sub> = <italic>X<sub>A</sub></italic> &#x00B7; <italic>e<sub>i</sub></italic>, and <inline-formula><alternatives><inline-graphic xlink:href="262295_inline15.gif"/></alternatives></inline-formula> = <italic>PK<sub>A</sub></italic> &#x00B7; <italic>e<sub>i</sub></italic>, where <italic>e<sub>i</sub></italic> denotes the unit vector with 0&#x2019;s at all positions except at position <italic>i</italic>, where it is equal to 1, and thus the construction is correct. Then, A sends (<inline-formula><alternatives><inline-graphic xlink:href="262295_inline16.gif"/></alternatives></inline-formula>) to <italic>S</italic><sub>1</sub>, and (<inline-formula><alternatives><inline-graphic xlink:href="262295_inline17.gif"/></alternatives></inline-formula>) to <italic>S</italic><sub>2</sub>.</p>
<p>Write requests are collected until the end of an epoch, when the servers combine their local states and publish the database with the queries. As long as the two servers do not collude, none of them can reconstruct what any given user has written., i.e., none of the servers can recover the gene or public key of the user sent in the write request. Also, in order to achieve disruption resistance, one can limit the number of queries to one per user for each phase of the epoch.</p></sec>
<sec id="s2d4">
<title>Response phase</title>
<p>After the database with the queries is published, the response phase begins. Here we can rely on MME&#x2019;s algorithm to generate matches on existing MME data, and simply extend it to encrypt the contact details of the relevant users with an interest in the same gene. This would be inline with the current privacy policy of the MME, as contact details of researchers with an interest in the same gene are already shared.</p>
<p>Users can also be given an option to voluntarily provide their contact details as follows. If user B notices that another researcher (user A) has an interest in the same gene X, say at row i of the database, she gets A&#x2019;s public key <italic>PK<sub>A</sub>,</italic> and encrypt her contact information (<italic>C<sub>B</sub></italic>) under <italic>PK<sub>A</sub></italic> and generates a write request as a share of <italic>Enc<sub>PKA</sub> (C<sub>B</sub></italic>), in a similar manner to the first epoch. More specifically, she chooses random <inline-formula><alternatives><inline-graphic xlink:href="262295_inline18.gif"/></alternatives></inline-formula> and forms the following vectors:</p>
<disp-formula id="eqn2"><alternatives><graphic xlink:href="262295_eqn2.gif"/></alternatives></disp-formula>
<p>User B then sends <italic>u</italic><sub>1</sub> to server <italic>S</italic><sub>1</sub> and <italic>u</italic><sub>2</sub> to <italic>S</italic><sub>2</sub>. At the end of this epoch, the results are being published in a column adjacent to the queried gene and the public encryption key. The querying users can use the database to find the row of interest (in this case <italic>i</italic>), decrypt the contact details, and get in touch with the responding users.</p>
</sec>
<sec id="s2d5">
<title>Correctness and Security</title>
<p>It is straightforward to see that the construction is correct, since, if all nodes execute the protocols correctly the result of combining all their local database states at the end of an epoch by the master server will result in revealing all the write requests processed. An adversary&#x2019;s advantage of guessing at which a certain user has written in the final database is the same as random guessing, hence, the construction guarantees anonymous writes. Disruption resistance can be also achieved in a straightforward manner since MME requires users to register on one of the databases, so they can allow maximum one write request per registered user per epoch.</p>
<sec id="s2d6">
<title>Limitations</title>
<p>Alas, this construction has the following limitations:
<list list-type="simple">
<list-item><label>1.</label><p><italic>Collisions:</italic> They might occur for writes generated by honest users, which all want to write at the same row;</p></list-item>
<list-item><label>2.</label><p><italic>Maliciously-formed write requests:</italic> A malicious user can easily send a malformed request to the servers, making all the data within the database non recoverable.</p></list-item>
</list></p>
</sec>
</sec>
</sec>
</sec>
<sec id="s3">
<label>3</label>
<title>Methods</title>
<sec id="s3a">
<label>3.1</label>
<title>Handling Collisions</title>
<p>As discussed previously, collisions might occur whenever multiple users try to write at the same row. Aiming to address them, we set the database size to be large enough to accommodate write requests at a 95&#x0025; non-collision rate. In other words, 5&#x0025; of the queries will likely fail due to collisions and will need to be re-submitted.</p>
<sec id="s3a1">
<label>3.1.1</label>
<title>Minimizing collisions</title>
<p>Our intuition is to follow a &#x201C;balls and bins&#x201D; approach, i.e., if we throw m balls uniformly and randomly into the l bins, we can estimate how many bins will contain exactly one ball. In our model, we can associate write requests to the <italic>m</italic> balls and the rows of the database to the l bins. Let <italic>B<sub>ij</sub></italic> be the event that ball <italic>i</italic> falls into bin <italic>j</italic>: for all <italic>i</italic> and <italic>j</italic>, we have <inline-formula><alternatives><inline-graphic xlink:href="262295_inline1.gif"/></alternatives></inline-formula> Then, let <inline-formula><alternatives><inline-graphic xlink:href="262295_inline2.gif"/></alternatives></inline-formula> be the event that exactly one ball falls in bin <italic>j</italic>. We have that:
<disp-formula id="eqn3"><alternatives><graphic xlink:href="262295_eqn3.gif"/></alternatives></disp-formula>
using the binomial theorem and ignoring low order terms. Then, <inline-formula><alternatives><inline-graphic xlink:href="262295_inline3.gif"/></alternatives></inline-formula> is the expected number of bins with exactly one ball, i.e., the expected number of messages successfully received. Dividing by <italic>m</italic>, we get the expected success rate as</p>
<disp-formula id="eqn10"><alternatives><graphic xlink:href="262295_eqn10.gif"/></alternatives></disp-formula>
<p>Thus, for a 95&#x0025; expected success rate, we need l &#x2248; 19.5m.</p>
<p>In AnoniMME, in order to set the size of the database, we need to estimate the expected number of write requests for each epoch. Looking at the three MME members which show statistics on the number of users, we find that GeneMatcher has 4,066 registered users, MyGene2 345 registered families, and Decipher 247 registered projects (users have to be part of a project in order to join Decipher) as of November 2017. This yields an average of approximately 1,550 users per database. Assuming that this is representative of the number of users for all MME databases, we can approximate the total number of users to be in the order 10,000. We also need to estimate how many users make queries in each epoch: assuming 5&#x0025; of users do so at each epoch, each epoch can run for 500 queries, yielding a database of size l <italic>&#x2248;</italic> 10,000. Further, note that we design AnoniMME&#x2019;s write request so that the row number at which we write is determined at randomly, given the number of write requests in the epoch as well as the database size, in order to avoid biases in choosing rows. This method, however, does not provide any way to recover in the case where a collision occurs, in that case the queries are irrecoverable, and the users would need to resubmit their queries in a future epoch.</p>
</sec>
<sec id="s3a2">
<label>3.1.2</label>
<title>Recovering from collisions</title>
<p>We also use a simple technique for recovering from collisions if/when these occur. Assume <italic>&#x03B1;</italic> messages have been written at row <italic>i</italic>, i.e., we have <italic>a</italic> = <italic>m</italic><sub>1</sub> &#x002B; <italic>m</italic><sub>2</sub> &#x002B; &#x2026; &#x002B; <italic>m<sub>&#x3B1;</sub></italic>. Inspired by &#x005B;<xref rid="c7" ref-type="bibr">7</xref>&#x005D;, we can modify the way in which the queries are built to recover each of the individual message m&#x00BF;, for 1 &#x2264; <italic>j &#x2264; &#x3B1;;</italic> specifically, we can use a system of <italic>&#x3B1;</italic> equations, which allows us to solve for each of the colliding messages. Without loss of generality, we consider the case <italic>&#x3B1;</italic> = 2 and explain how to recover from collisions occurring for the gene name, but similar methods can be used for <italic>&#x3B1; &#x3E; 2</italic> and to recover public key and/or encrypted contact details. When a collision occurs at row <italic>i</italic>, we have an entry <italic>a = X<sub>A</sub></italic> &#x002B; <italic>X<sub>B</sub></italic>, where <italic>X<sub>A</sub></italic> is the gene sent by user <italic>A,</italic> and <italic>X<sub>B</sub></italic> is the gene sent by user <italic>B</italic>. If, rather than just sending the queried gene <italic>X</italic>, users send (<italic>X</italic>, <italic>X</italic><sup>2</sup>), we can recover <italic>X<sub>A</sub></italic> and <italic>X<sub>B</sub></italic> by solving a system of two equations with two variables.</p>
<p>In this case we also compute the size of the database needed for an expected success rate as follows:</p>
<disp-formula id="eqn4"><alternatives><graphic xlink:href="262295_eqn4.gif"/></alternatives></disp-formula>
<p>Where <inline-formula><alternatives><inline-graphic xlink:href="262295_inline4.gif"/></alternatives></inline-formula> is the expected number of rows with exactly one write request applied to them, computed as before, and <inline-formula><alternatives><inline-graphic xlink:href="262295_inline5.gif"/></alternatives></inline-formula> is the expected number of rows with exactly two write requests applied to them. Computing <inline-formula><alternatives><inline-graphic xlink:href="262295_inline6.gif"/></alternatives></inline-formula> <inline-formula><alternatives><inline-graphic xlink:href="262295_inline7.gif"/></alternatives></inline-formula> we the expected success rate as:</p>
<disp-formula id="eqn5"><alternatives><graphic xlink:href="262295_eqn5.gif"/></alternatives></disp-formula>
<p>In this case, for an epoch of m write requests, with a 95&#x0025; expected success rate, we need a database with <italic>l&#x2019; &#x2248; 2.7 m</italic> cells <inline-formula><alternatives><inline-graphic xlink:href="262295_inline8.gif"/></alternatives></inline-formula>. This implies that with 500 write requests per epoch, the database needs <italic>l&#x2019; &#x2248; 2.7.500 = 1,350</italic> cells for each vector.</p>
<p>We now generalize for any value of <italic>&#x03B1;</italic>. Users submit <italic>X, X</italic><sup>2</sup>,&#x2026;, <italic>X<sup>&#x03B1;</sup></italic> for gene <italic>X</italic> to be queried. This allows us to recover from an <italic>&#x03B1;</italic>-way collision, obtaining a system of <italic>&#x03B1;</italic> equations with &#x03B1; variables. The expected success rate is:</p>
<disp-formula id="eqn6"><alternatives><graphic xlink:href="262295_eqn6.gif"/></alternatives></disp-formula>
<p>Where <inline-formula><alternatives><inline-graphic xlink:href="262295_inline9.gif"/></alternatives></inline-formula> is the expected number of rows with exactly <italic>k</italic> write requests applied to them.Each <inline-formula><alternatives><inline-graphic xlink:href="262295_inline9A.gif"/></alternatives></inline-formula> is computed as <inline-formula><alternatives><inline-graphic xlink:href="262295_inline10.gif"/></alternatives></inline-formula>.</p>
<p>Hence, we obtain:</p>
<disp-formula id="eqn7"><alternatives><graphic xlink:href="262295_eqn7.gif"/></alternatives></disp-formula>
<p>We solve this equation for <italic>l</italic>, given the expected success rate <italic>E&#x005B;SuccessRate&#x005D;,</italic> the collision recovery factor <italic>&#x03B1;</italic> and m the number of write requests to be written in a certain epoch. If this method is used throughout both epochs, colliding requests from the query phase will have to be recovered before the response phase can begin.</p>
<p>Due to the nature of our query/response model, we can expect collisions to occur more often in the response phase. Hence, we will can build the system using different collision recovery factors <italic>&#x3B1;<sub>q</sub></italic> for the query phase and <italic>&#x3B1;<sub>r</sub></italic> for the response phase, with <italic>&#x3B1;<sub>r</sub> &#x2265; &#x3B1;<sub>q</sub></italic>.</p>
</sec>
</sec>
<sec id="s3b">
<label>3.2</label>
<title>N-server Construction</title>
<p>We now present the generalized model for the case with <italic>n</italic> servers and a database with <italic>l</italic> rows. We use collision parameters <italic>&#x3B1;<sub>q</sub></italic> and <italic>&#x3B1;<sub>r</sub></italic> for the query and response phase, respectively. The various steps of the construction are illustrated in <xref ref-type="fig" rid="fig2">Figure 2</xref>.</p>
<fig id="fig2" position="float" fig-type="figure" orientation="portrait">
<label>Figure 2.</label>
<caption><p><italic>n</italic>-server write request processing. At the end of the epoch the Master Server publishes the database with all the write requests and the nodes will be reset to hold an empty database.</p></caption>
<graphic xlink:href="262295_fig2.tif"/>
</fig>
<sec id="s3b1">
<title>Query phase</title>
<p>Assume user A wants to query gene <italic>X<sub>A</sub></italic>, but does not want to reveal that she is the person querying it. As in the construction presented in <xref ref-type="sec" rid="s2d">Section 2.4</xref>, A builds her write request, consisting of (<italic>X<sub>A</sub></italic>, <italic>PK<sub>A</sub>),</italic> where <italic>PK<sub>A</sub></italic> is her public key, aiming to write at row <italic>i</italic> in the database. She picks random numbers <inline-formula><alternatives><inline-graphic xlink:href="262295_inline11.gif"/></alternatives></inline-formula> and <inline-formula><alternatives><inline-graphic xlink:href="262295_inline12.gif"/></alternatives></inline-formula> where <italic>l</italic> is the size of the database, <italic>n</italic> the number of nodes the write request will be sent to, and &#x3B1;<italic><sub>q</sub></italic> the number of allowed collisions.</p>
<p>The query write request vectors are constructed as follows:</p>
<disp-formula id="eqn8"><alternatives><graphic xlink:href="262295_eqn8.gif"/></alternatives></disp-formula>
<p>The querying user A ends <inline-formula><alternatives><inline-graphic xlink:href="262295_inline19.gif"/></alternatives></inline-formula> to server <italic>j</italic> for each <italic>j</italic>, 1 &#x2264; <italic>j</italic> &#x2264; <italic>n</italic>, where <inline-formula><alternatives><inline-graphic xlink:href="262295_inline20.gif"/></alternatives></inline-formula>, and <inline-formula><alternatives><inline-graphic xlink:href="262295_inline21.gif"/></alternatives></inline-formula> <inline-formula><alternatives><inline-graphic xlink:href="262295_inline22.gif"/></alternatives></inline-formula>. We also consider the special case of <italic>&#x3B1;<sub>q</sub> =</italic> 1,when there is no recovery for collisions, but, instead, we adjust the database size according to the minimizing collisions case. The servers collect write requests until the end of the epoch and then send their local databases to the master server, which will combine them to reveal the database.</p>
</sec>
<sec id="s3b2">
<title>Response Phase</title>
<p>As the database with the queries is published, the response phase begins. As discussed in <xref ref-type="sec" rid="s2d">Section 2.4</xref>, we can rely on MME&#x2019;s algorithm to generate matches on existing data from the platform, encrypt the contact details of the relevant users with an interest in the same gene, and extend it to allow for voluntary responses. More specifically, user B can add their contact details <italic>C<sub>B</sub></italic> by sending a write request as a share of <italic>c</italic> = <italic>Enc<sub>PKA</sub> (C<sub>B</sub></italic>), in a similar manner to the first epoch. That is, first, she picks random <inline-formula><alternatives><inline-graphic xlink:href="262295_inline13.gif"/></alternatives></inline-formula> and forms the following vectors:</p>
<disp-formula id="eqn9"><alternatives><graphic xlink:href="262295_eqn9.gif"/></alternatives></disp-formula>
<p>User B then sends <italic>u<sub>j</sub></italic> = (<italic>u<sub>j</sub></italic>,<sub>1</sub>,&#x2026; <italic>u<sub>j,&#x3B1;<sub>q</sub></sub></italic>) to server <italic>S<sub>j</sub></italic>. At the end of this epoch, the results are being published in a column adjacent to the queried gene and the public encryption key. In case of collisions, the individual ciphertexts can be recovered up to <italic>&#x3B1;<sub>r</sub></italic> collisions. Finally, the querying users can use the database to find the row of interest (in this case <italic>i</italic>) and decrypt the contact details received and contact the person.</p>
</sec>
</sec>
<sec id="s3c">
<label>3.3</label>
<title>Experimental Evaluation</title>
<p>In this section, we present an experimental evaluation of AnoniMME, aiming to demonstrate its practicality for real-world deployment.</p>
<p>We have implemented the <italic>n</italic>-server construction (<xref ref-type="sec" rid="s3b">Section 3.2</xref>) using Python 3.6 and evaluated our prototype on a Macbook Pro running MacOS Sierra 10.12.6 and equipped with a 2.7GHz Intel i5 processor, and 16GB of RAM.</p>
<p>Experiments are performed in two different settings, with two and six node servers, respectively, and always averaged over 1,000 executions. We also use three different epoch sizes, namely, 100, 500, and 1,000 write requests per epoch during the query phase. For the response phase, we keep the database size fixed from the query phase. Overall, we evaluate running times needed to generate the write requests and the bandwidth overhead supporting the recovery of 2, 5, and 10 colliding messages, all on the client side (i.e. one request per epoch). The servers run Flask with RESTful interface, so we use <ext-link ext-link-type="uri" xlink:href="http://HTTP">HTTP</ext-link> requests to send the messages, and the payload is built in JSON, therefore, we measure, in bytes, the size of the JSON payload (plus <ext-link ext-link-type="uri" xlink:href="http://HTTP">HTTP</ext-link> headers) to estimate the total bandwidth required for sending write requests.</p>
<p>On the client side, the cryptographic layer includes generating public/private keys (done only once) and building the vectors to be sent to the <italic>n</italic> servers as part of the write request, which incurs O(<italic>n</italic>) complexity. Gene name and contact details are assumed to be no longer than 64 characters, while random numbers used for vector generation during query phase are up to 1,024 bits long, for <italic>&#x3B1;<sub>q</sub></italic> &#x2208; &#x007B;1, 2&#x007D; and <italic>&#x3B1;<sub>r</sub></italic> = 2. For the response phase, the length of the random values varies according to the collision recovery factor <italic>&#x3B1;<sub>r</sub></italic>. For <italic>&#x3B1;<sub>r</sub></italic> = 5, their length is 2,560 bits, while for <italic>&#x3B1;<sub>r</sub></italic> = 10 it is 5,120. Finally, note that we generate plausible gene queries using the set of gene symbols (e.g, &#x201C;BRCA2&#x201D;), taken from <ext-link ext-link-type="uri" xlink:href="http://gfuncpathdb.ucdenver.edu/iddrc/iddrc/data/officialGeneSymbol.html">http://gfuncpathdb.ucdenver.edu/iddrc/iddrc/data/officialGeneSymbol.html</ext-link>.</p>
<sec id="s3c1">
<label>3.3.1</label>
<title>Two Node Servers</title>
<p>We start with the setting involving two node servers and a master server, considering epochs of size 100, 500, and 1,000. As mentioned above, we evaluate bandwidth overhead and running times required for query and response write requests.</p>
<p>The database size required for each of the three test cases is calculated according to the method presented in <xref ref-type="sec" rid="s3a">Section 3.1</xref> for minimizing collisions, thus, <italic>l =</italic> 19.5m, where l denotes the number of rows required and m is the number of write requests for the epoch.</p>
<p>It follows that the l amounts to 2,000, 10,000, and 20,000 rows for m equal to 100, 500, and 1,000, respectively.</p>
<p>Running times for both the query write and the response (considering <italic>&#x3B1;<sub>r</sub></italic> &#x2208; &#x007B;2,5,10&#x007D;) are shown in <xref ref-type="fig" rid="fig3">Figure 3</xref>. Overall, we find that, during the query phase, with a database size of 2,000 rows, it takes approximately 0.014s to generate vectors in our testbed. Running times scale linearly, i.e., it takes 0.062s with 10,000 rows and 0.126s with 20,000 rows. The bandwidth overhead, shown in <xref ref-type="fig" rid="fig4">Figure 4</xref>, ranges from 2.5MB for the smallest database size to 25MB for the largest case considered in our test cases, which can be considered an acceptable amount of traffic expected from the client side.</p>
<fig id="fig3" position="float" fig-type="figure" orientation="portrait">
<label>Figure 3:</label>
<caption><p>Two nodes running times for query write request, response write request with recovery from 2 collisions, response write request with recovery from 5 collisions, response write request with recovery from 10 collisions.</p></caption>
<graphic xlink:href="262295_fig3.tif"/>
</fig>
<fig id="fig4" position="float" fig-type="figure" orientation="portrait">
<label>Figure 4:</label>
<caption><p>Two nodes bandwidth averages for query write request, response write request with recovery from 2 collisions, response write request with recovery from 5 collisions, response write request with recovery from 10 collisions.</p></caption>
<graphic xlink:href="262295_fig4.tif"/>
</fig>
<p>For the response phase, we find that, when <italic>&#x3B1;<sub>r</sub> =</italic> 2, the results are similar to the query phase since responding users need to generate two vectors in order to allow collision recovery, same as for the querying user. When <italic>&#x3B1;<sub>r</sub></italic> equals 5 or 10, we notice an increase in both running times and bandwidth. Nonetheless, computational complexity is still acceptable, since, even with the largest database size, write request generation takes less than 0.5s for <italic>&#x3B1;<sub>r</sub> = 5</italic> and less than 1.5s for <italic>&#x3B1;<sub>r</sub> =</italic> 10. Communication overhead, on the other hand, increases to 160MB and 617MB, respectively, with the largest database size. However, one can adjust the collision minimization parameter so that 10-way collision recovery is not needed.</p>
</sec>
<sec id="s3c2">
<label>3.3.2</label>
<title>Six Node Servers</title>
<p>We also experiment with an instantiation of AnoniMME using six node servers, thus mirroring the current MME setting, which involves seven members. Once again, we consider three settings (100,500, and 1,000 write requests per epoch), and obtain the resulting database size based on the recovery from collisions method discussed in <xref ref-type="sec" rid="s3a">Section 3.1</xref>. We support recovery from two colliding messages for the query phase, i.e. <italic>&#x3B1;<sub>q</sub> =</italic> 2. Therefore, the number of rows required is <inline-formula><alternatives><inline-graphic xlink:href="262295_inline14.gif"/></alternatives></inline-formula> where <italic>m</italic> is the number of write requests for the epoch, thus, l equals 135, 675, and 1,350 for m = 100, 500, and 1,000, respectively. As per the response phase, we run tests with different values <italic>&#x3B1;<sub>r</sub> &#x2208;</italic> &#x007B;2, 5,10&#x007D;, considering the database size fixed as for the query phase.</p>
<p>Once again, we estimate running times (see <xref ref-type="fig" rid="fig5">Figure 5</xref>) and the bandwidth overhead (see <xref ref-type="fig" rid="fig6">Figure 6</xref>). Even though this requires more vectors to be generated by the users compared to the two-node setting (cf. <xref ref-type="sec" rid="s3c1">Section 3.3.1</xref>), we observe a considerable decrease in both running times and bandwidth overhead for the same epoch sizes due to the decreased number of rows in the database. Specifically, computational complexity is again linear over all test cases, but the write request generation taking less than half the time. There is also a big improvement in terms of communication complexity: even in the most bandwidth-heavy case (i.e., <italic>&#x3B1;<sub>r</sub> =</italic> 10), with 1,000 write requests per epoch, we observe a five-fold improvement, with bandwidth decreasing from 617MB to 125MB.</p>
<fig id="fig5" position="float" fig-type="figure" orientation="portrait">
<label>Figure 5:</label>
<caption><p>Six nodes running times for query write request, response write request with recovery from 2 collisions, response write request with recovery from 5 collisions, response write request with recovery from 10 collisions.</p></caption>
<graphic xlink:href="262295_fig5.tif"/>
</fig>
<fig id="fig6" position="float" fig-type="figure" orientation="portrait">
<label>Figure 6:</label>
<caption><p>Six nodes bandwidth averages for query write request, response write request with recovery from 2 collisions, response write request with recovery from 5 collisions, response write request with recovery from 10 collisions.</p></caption>
<graphic xlink:href="262295_fig6.tif"/>
</fig>
<p>On the other hand, the query phase is less efficient than the response phase (with <italic>&#x3B1;<sub>r</sub></italic> = 2), compared to the two-node setting, since the querying user now has to generate two vectors for each gene so that collision recovery is possible, hence, four vectors in total; whereas, the responding user only generates two vectors.</p>
</sec>
</sec>
</sec>
<sec id="s4">
<label>4</label>
<title>Discussion</title>
<p>Our experimental evaluation attests to the practicality of AnoniMME and the feasibility of using it to bring anonymity to the Matchmaker Exchange. Overall, using the method proposed in <xref ref-type="sec" rid="s3c1">Section 3.3.1</xref> to recover write requests in the case of collisions yields better running times and bandwidth complexities, even when the number of nodes increases.</p>
<p>Considering the close relatedness of our model to Riposte &#x005B;<xref rid="c7" ref-type="bibr">7</xref>&#x005D;, a comparison between the evaluation of them could be interesting. However, the evaluations are done differently in the two models: Riposte analyzes the experimental results at server level, while we evaluate the performance from a user perspective. In both cases, the bandwidth overhead in our <italic>n</italic>-server construction is non-negligible, especially with a high collision recovery factor and increasing database sizes as observed in <xref ref-type="sec" rid="s3c1">Section 3.3.1</xref>. A possible solution is to use, like Riposte, distributed point functions to reduce bandwidth complexity; we leave this as part of future work.</p>
<p>Furthermore, as in AnoniMME the anonymity set size corresponds to the number of users querying in a given epoch, one could increase the anonymity set by requiring users to send empty queries to the system following a certain probability distribution. The write requests would be formed as discussed in <xref ref-type="sec" rid="s3b">Section 3.2</xref>, although, instead of inputting a gene, the public key or the contact details, the users just send an empty query. This is also used in Riposte, in order to minimize statistical disclosure attacks on their platform.</p>
<p>Finally note that our implementation currently allows for 64 character messages, thus, queries can also include phenotypes from the Human Phenotype Ontology (as currently supported by MME), although, to ease of presentation we have discussed our experiments by only considering gene names.</p>
</sec>
<sec id="s5">
<label>5</label>
<title>Related Work</title>
<p>Over the past few years, the research community has produced a large body of work aimed to analyze and counter a number of challenging privacy and security threats in genomics. Genomic data contains information about ethnic heritage, predisposition to diseases and conditions, as well as many other phenotypic traits &#x005B;<xref rid="c1" ref-type="bibr">1</xref>&#x005D;, and, as discussed below, is hard to anonymize &#x005B;<xref rid="c12" ref-type="bibr">12</xref>, <xref rid="c8" ref-type="bibr">8</xref>&#x005D;.</p>
<p>In particular, early genomic privacy work has focused on personal genomic testing, i.e., computational tests run on sequenced (digitized) genomes aiming to assess an individual&#x2019;s genetic susceptibility to diseases and/or determine the best course of treatment. Baldi et al. &#x005B;<xref rid="c3" ref-type="bibr">3</xref>&#x005D; assume that each individual will keep a copy of their data and consent to tests done in such a way that only the outcome is disclosed: in this setting, the authors present several cryptographic protocols allowing researchers to privately search mutations in specific genes. Then, Ayday et al. &#x005B;<xref rid="c2" ref-type="bibr">2</xref>&#x005D; rely on a semi-trusted party to store an encrypted copy of the individual&#x2019;s genomic data: using additively homomorphic encryption and proxy re-encryption, they allow a Medical Center to privately perform disease susceptibility tests on patients&#x2019; SNPs.</p>
<p>Rapid and effective progress in genomics and personalized medicine is often promoted as being dependent on the ability to share sequenced genomes, and make them accessible to researchers for different research purposes. However, it is often hard to share data due to privacy, ethical, legal, and informed consent hurdles. To address these issues, a few privacypreserving methods have been presented to facilitate genomic data sharing. Kamm et al. &#x005B;<xref rid="c14" ref-type="bibr">14</xref>&#x005D; use secret sharing for distributing data among several entities. Using secure multi-party computations on the data, computations can be done across multiple independent entities, without violating the privacy of individual donors or leaking the data to third parties. Then, Wang et al. &#x005B;<xref rid="c20" ref-type="bibr">20</xref>&#x005D; allow clinicians to find similar patients in bio-repositories, with similarity being defined as the edit distance. Their construction is based on a combination of a novel genomic edit distance approximation algorithm and new construction of private set difference size protocols. Also, Chen et al. &#x005B;<xref rid="c6" ref-type="bibr">6</xref>&#x005D; introduce a framework using Intel&#x2019;s Software Guard Extension and hardware for trustworthy computations. This way, secure and distributed computation over encrypted data can be performed, respecting institutional policies and regulations for protected health information.</p>
<p>Another initiative developed by GA4GH, besides MME, is the Beacon Project &#x005B;<xref rid="c10" ref-type="bibr">10</xref>&#x005D;; a beacon is a service that any institution can implement to share genetic data. Users can query the system through a federated search engine, the Beacon Network. The queries are of the form <italic>&#x201C;Do you have any genomes with an &#x2018;A&#x2019; at position 100,735 on chromosome 3?&#x201D;,</italic> and the beacon responds with either &#x201C;Yes&#x201D; or &#x201C;No&#x201D;, keeping all other sequence data concealed. This kind of queries can be used to either search all beacons or specific databases. The result is then shown as a list of databases where the allele has been previously observed, including the institution that holds the said database. In &#x005B;<xref rid="c18" ref-type="bibr">18</xref>&#x005D;, Shingapure et al. present an attack on beacons, showing that re-identification is possible using a likelihood-ratio test. This attack has been improved by Thenen et al. &#x005B;<xref rid="c19" ref-type="bibr">19</xref>&#x005D;, in terms of number of queries needed to determine the presence of an individual in a beacon. Note that these attacks do not apply to MME, since no genotype information or aggregate data is released publicly, and the querying is done only on specific genes, with no genotype information.</p>
<p>Overall, a number of attacks to anonymized/de-identified genomic data have been presented. Homer et al. &#x005B;<xref rid="c13" ref-type="bibr">13</xref>&#x005D; show how to detect the presence of an individual genotype in a mixture of pooled DNA, while Gymrek et al. &#x005B;<xref rid="c12" ref-type="bibr">12</xref>&#x005D; recover the surnames of individuals from a genomic data repository by profiling short tandem repeats on the Y chromosome, querying recreational genealogy databases, and relying on additional metadata (such as age and state) to identify the identity of the target.</p>
<p>Finally, closely related to our construction is Riposte &#x005B;<xref rid="c7" ref-type="bibr">7</xref>&#x005D;, an anonymous broadcast messaging system, which is also built using Reverse PIR. As discussed earlier, it allows a large number of clients to post messages anonymously on a &#x201C;bulletin board&#x201D; maintained at a small set of servers. The main goal of the system is to provide a platform for whistleblowers, allowing them to anonymously post 160 byte length messages. Besides using Reverse PIR in a different setting, and thus addressing different challenges in scalability, also note that our AnoniMME framework also allows replies to messages. Furthermore, we also introduce a new extension to prevent malicious writes.</p>
</sec>
<sec id="s6">
<label>6</label>
<title>Conclusion</title>
<p>This paper presented AnoniMME, a framework geared to bring anonymity to Matchmaker Exchange (MME) platform. Specifically, AnoniMME supports anonymous queries, by relying on Reverse PIR, while mirroring the functionalities of MME. Queries include the gene name as in MME, but also the querying user&#x2019;s public key, and are collected during epochs, whose length is based on the number of write requests. By taking advantage of the underlying MME matching protocol, these queries can be seamlessly responded to, without publicly revealing the contact details of other researchers/clinicians which generated a match, by using the public key provided to encrypt the match. Also, other users can provide their (encrypted) contact details if they so wish.</p>
<p>The proposed protocol is compatible with the functionalities and the requirements of MME, but adds anonymous queries with a low overhead, as we demonstrated empirically. Thus, we are confident that AnoniMME can eventually be deployed in the wild and further encouraging researchers to share genomic data, by minimizing the possibility of exposing confidential research when using Matchmaker Exchange.</p>
<p>As part of future work, we plan to include and experimentally evaluate an extension to malicious users in our prototype, support the execution of the response phase over multiple query epochs, and further reduce bandwidth complexity.</p>
</sec>
</body>
<back>
<ack><title>Acknowledgements</title>
<p>We thank Christophe Dessimoz for valuable feedback provided, as well as insights from users of the platform. This work has been supported by the Google Faculty Award on Enabling Progress in Genomic Research via Privacy-Preserving Data Sharing.</p>
</ack>
<ref-list>
<title>References</title>
<ref id="c1"><label>[1]</label><mixed-citation publication-type="other"><string-name><given-names>E.</given-names> <surname>Ayday</surname></string-name>, <string-name><given-names>E.</given-names> <surname>De Cristofaro</surname></string-name>, <string-name><given-names>J.-P.</given-names> <surname>Hubaux</surname></string-name>, and <string-name><given-names>G.</given-names> <surname>Tsudik.</surname></string-name> <article-title>The Chills and Thrills of Whole Genome Sequencing</article-title>. <source>IEEE Computer</source>, <year>2015</year>.</mixed-citation></ref>
<ref id="c2"><label>[2]</label><mixed-citation publication-type="confproc"><string-name><given-names>E.</given-names> <surname>Ayday</surname></string-name>, <string-name><given-names>J. L.</given-names> <surname>Raisaro</surname></string-name>, <string-name><given-names>J.-P.</given-names> <surname>Hubaux</surname></string-name>, and <string-name><given-names>J.</given-names> <surname>Rougemont.</surname></string-name> <source>Protecting and Evaluating Genomic Privacy in Medical Tests and Personalized Medicine</source>. <conf-name>In Proceedings of the 12th ACM Workshop on Privacy in the Electronic Society</conf-name>, pages <fpage>95</fpage>&#x2013;<lpage>106</lpage>, <year>2013</year>.</mixed-citation></ref>
<ref id="c3"><label>[3]</label><mixed-citation publication-type="confproc"><string-name><given-names>P.</given-names> <surname>Baldi</surname></string-name>, <string-name><given-names>R.</given-names> <surname>Baronio</surname></string-name>, <string-name><given-names>E.</given-names> <surname>De Cristofaro</surname></string-name>, <string-name><given-names>P.</given-names> <surname>Gasti</surname></string-name>, and <string-name><given-names>G.</given-names> <surname>Tsudik.</surname></string-name> <source>Countering gattaca: efficient and secure testing of fully-sequenced human genomes</source>. <conf-name>In Proceedings of the 18th ACM Conference on Computer and Communications Security</conf-name>, pages <fpage>691</fpage>&#x2013;<lpage>702</lpage>, <year>2011</year>.</mixed-citation></ref>
<ref id="c4"><label>[4]</label><mixed-citation publication-type="website"><article-title>Beacon Network</article-title>. <ext-link ext-link-type="uri" xlink:href="http://beacon-network.org">https://beacon-network.org</ext-link>, <year>2017</year>.</mixed-citation></ref>
<ref id="c5"><label>[5]</label><mixed-citation publication-type="journal"><string-name><given-names>O. J.</given-names> <surname>Buske</surname></string-name>, <string-name><given-names>F.</given-names> <surname>Schiettecatte</surname></string-name>, <string-name><given-names>B.</given-names> <surname>Hutton</surname></string-name>, <string-name><given-names>S.</given-names> <surname>Dumitriu</surname></string-name>, <string-name><given-names>A.</given-names> <surname>Misyura</surname></string-name>, <string-name><given-names>L.</given-names> <surname>Huang</surname></string-name>, <string-name><given-names>T.</given-names> <surname>Hartley</surname></string-name>, <string-name><given-names>M.</given-names> <surname>Girdea</surname></string-name>, <string-name><given-names>N.</given-names> <surname>Sobreira</surname></string-name>, <string-name><given-names>C.</given-names> <surname>Mungall</surname></string-name>, and <string-name><given-names>M.</given-names> <surname>Brudno.</surname></string-name> <article-title>The Matchmaker Exchange API: Automating patient matching through the exchange of structured phenotypic and genotypic profiles</article-title>. <source>Human mutation</source>, <volume>36</volume>(<issue>10</issue>):<fpage>922</fpage>&#x2013;<lpage>927</lpage>, <year>2015</year>.</mixed-citation></ref>
<ref id="c6"><label>[6]</label><mixed-citation publication-type="journal"><string-name><given-names>F.</given-names> <surname>Chen</surname></string-name>, <string-name><given-names>S.</given-names> <surname>Wang</surname></string-name>, <string-name><given-names>X.</given-names> <surname>Jiang</surname></string-name>, <string-name><given-names>S.</given-names> <surname>Ding</surname></string-name>, <string-name><given-names>Y.</given-names> <surname>Lu</surname></string-name>, <string-name><given-names>J.</given-names> <surname>Kim</surname></string-name>, <string-name><given-names>S. C.</given-names> <surname>Sahinalp</surname></string-name>, <string-name><given-names>C.</given-names> <surname>Shimizu</surname></string-name>, <string-name><given-names>J. C.</given-names> <surname>Burns</surname></string-name>, <string-name><given-names>V. J.</given-names> <surname>Wright</surname></string-name>, <string-name><given-names>E.</given-names> <surname>Png</surname></string-name>, <string-name><given-names>M. L.</given-names> <surname>Hibberd</surname></string-name>, <string-name><given-names>D. D.</given-names> <surname>Lloyd</surname></string-name>, <string-name><given-names>H.</given-names> <surname>Yang</surname></string-name>, <string-name><given-names>A.</given-names> <surname>Telenti</surname></string-name>, <string-name><given-names>C. S.</given-names> <surname>Bloss</surname></string-name>, <string-name><given-names>D.</given-names> <surname>Fox</surname></string-name>, <string-name><given-names>K.</given-names> <surname>Lauter</surname></string-name>, and <string-name><given-names>L.</given-names> <surname>Ohno-Machado.</surname></string-name> <article-title>PRINCESS: Privacy-protecting Rare disease International Network Collaboration via Encryption through Software guard extensionS</article-title>. <source>Bioinformatics</source>, <volume>33</volume>(<issue>6</issue>):<fpage>871</fpage>&#x2013;<lpage>878</lpage>, <year>2017</year>.</mixed-citation></ref>
<ref id="c7"><label>[7]</label><mixed-citation publication-type="other"><string-name><given-names>H.</given-names> <surname>Corrigan-Gibbs</surname></string-name>, <string-name><given-names>D.</given-names> <surname>Boneh</surname></string-name>, and <string-name><given-names>D.</given-names> <surname>Mazires.</surname></string-name> <article-title>Riposte: An Anonymous Messaging System Handling Millions of Users</article-title>. <source>arXiv:1503.06115 &#x005B;cs&#x005D;</source>, pages <fpage>321</fpage>&#x2013;<lpage>338</lpage>, <year>2015</year>. <collab>arXiv: 1503.06115</collab>.</mixed-citation></ref>
<ref id="c8"><label>[8]</label><mixed-citation publication-type="journal"><string-name><given-names>Y.</given-names> <surname>Erlich</surname></string-name> and <string-name><given-names>A.</given-names> <surname>Narayanan.</surname></string-name> <article-title>Routes for Breaching and Protecting Genetic Privacy</article-title>. <source>Nature Reviews Genetics</source>, <volume>15</volume>(<issue>6</issue>):<fpage>409</fpage>&#x2013;<lpage>421</lpage>, <year>2014</year>.</mixed-citation></ref>
<ref id="c9"><label>[9]</label><mixed-citation publication-type="website"><article-title>Genomics England</article-title>. <ext-link ext-link-type="uri" xlink:href="http://www.genomicsengland.co.uk">https://www.genomicsengland.co.uk</ext-link>, <year>2017</year>.</mixed-citation></ref>
<ref id="c10"><label>[10]</label><mixed-citation publication-type="journal"><article-title>Global Alliance for Genomics and Health. A federated ecosystem for sharing genomic, clinical data</article-title>. <source>Science</source>, <volume>352</volume>(<issue>6291</issue>):<fpage>1278</fpage>&#x2013;<lpage>1280</lpage>, <year>2016</year>.</mixed-citation></ref>
<ref id="c11"><label>[11]</label><mixed-citation publication-type="website"><article-title>Global Alliance for Genomics and Health</article-title>. <ext-link ext-link-type="uri" xlink:href="http://www.ga4gh.org/">https://www.ga4gh.org/</ext-link>, <year>2017</year>.</mixed-citation></ref>
<ref id="c12"><label>[12]</label><mixed-citation publication-type="journal"><string-name><given-names>M.</given-names> <surname>Gymrek</surname></string-name>, <string-name><given-names>A. L.</given-names> <surname>McGuire</surname></string-name>, <string-name><given-names>D.</given-names> <surname>Golan</surname></string-name>, <string-name><given-names>E.</given-names> <surname>Halperin</surname></string-name>, and <string-name><given-names>Y.</given-names> <surname>Erlich.</surname></string-name> <article-title>Identifying personal genomes by surname inference</article-title>. <source>Science (New York, N.Y.)</source>, <volume>339</volume>(<issue>6117</issue>):<fpage>321</fpage>&#x2013;<lpage>324</lpage>, <year>2013</year>.</mixed-citation></ref>
<ref id="c13"><label>[13]</label><mixed-citation publication-type="journal"><string-name><given-names>N.</given-names> <surname>Homer</surname></string-name>, <string-name><given-names>S.</given-names> <surname>Szelinger</surname></string-name>, <string-name><given-names>M.</given-names> <surname>Redman</surname></string-name>, <string-name><given-names>D.</given-names> <surname>Duggan</surname></string-name>, <string-name><given-names>W.</given-names> <surname>Tembe</surname></string-name>, <string-name><given-names>J.</given-names> <surname>Muehling</surname></string-name>, <string-name><given-names>J. V.</given-names> <surname>Pearson</surname></string-name>, <string-name><given-names>D. A.</given-names> <surname>Stephan</surname></string-name>, <string-name><given-names>S. F.</given-names> <surname>Nelson</surname></string-name>, and <string-name><given-names>D. W.</given-names> <surname>Craig.</surname></string-name> <article-title>Resolving Individuals Contributing Trace Amounts of DNA to Highly Complex Mixtures Using High-Density SNP Genotyping Microarrays</article-title>. <source>PLOS Genetics</source>, <volume>4</volume>(<issue>8</issue>):<fpage>e1000167</fpage>, <year>2008</year>.</mixed-citation></ref>
<ref id="c14"><label>[14]</label><mixed-citation publication-type="journal"><string-name><given-names>L.</given-names> <surname>Kamm</surname></string-name>, <string-name><given-names>D.</given-names> <surname>Bogdanov</surname></string-name>, <string-name><given-names>S.</given-names> <surname>Laur</surname></string-name>, and <string-name><given-names>J.</given-names> <surname>Vilo.</surname></string-name> <article-title>A new way to protect privacy in large-scale genome-wide association studies</article-title>. <source>Bioinformatics</source>, <volume>29</volume>(<issue>7</issue>):<fpage>886</fpage>&#x2013;<lpage>893</lpage>, <year>2013</year>.</mixed-citation></ref>
<ref id="c15"><label>[15]</label><mixed-citation publication-type="website"><article-title>National Human Genome Research Institute. The cost of sequencing a human genome</article-title>. <ext-link ext-link-type="uri" xlink:href="http://www.genome.gov/sequencingcosts/">https://www.genome.gov/sequencingcosts/</ext-link>, <year>2017</year>.</mixed-citation></ref>
<ref id="c16"><label>[16]</label><mixed-citation publication-type="website"><article-title>National Institute of Health</article-title>. <source>The All of Us Research Program</source>. <ext-link ext-link-type="uri" xlink:href="http://allofus.nih.gov/">https://allofus.nih.gov/</ext-link>, <year>2017</year>.</mixed-citation></ref>
<ref id="c17"><label>[17]</label><mixed-citation publication-type="journal"><string-name><given-names>A. A.</given-names> <surname>Philippakis</surname></string-name>, <string-name><given-names>D. R.</given-names> <surname>Azzariti</surname></string-name>, <string-name><given-names>S.</given-names> <surname>Beltran</surname></string-name>, <string-name><given-names>A. J.</given-names> <surname>Brookes</surname></string-name>, <string-name><given-names>C. A.</given-names> <surname>Brownstein</surname></string-name>, <string-name><given-names>M.</given-names> <surname>Brudno</surname></string-name>, <string-name><given-names>H. G.</given-names> <surname>Brunner</surname></string-name>, <string-name><given-names>O. J.</given-names> <surname>Buske</surname></string-name>, <string-name><given-names>K.</given-names> <surname>Carey</surname></string-name>, <string-name><given-names>C.</given-names> <surname>Doll</surname></string-name>, <etal>et al.</etal> <article-title>The Matchmaker Exchange: A platform for rare disease gene discovery</article-title>. <source>Human mutation</source>, <volume>36</volume>(<issue>10</issue>):<fpage>915</fpage>&#x2013;<lpage>921</lpage>, <year>2015</year>.</mixed-citation></ref>
<ref id="c18"><label>[18]</label><mixed-citation publication-type="journal"><string-name><given-names>S. S.</given-names> <surname>Shringarpure</surname></string-name> and <string-name><given-names>C. D.</given-names> <surname>Bustamante</surname></string-name>. <article-title>Privacy Risks from Genomic Data-Sharing Beacons</article-title>. <source>The American Journal of Human Genetics</source>, <volume>97</volume>(<issue>5</issue>):<fpage>631</fpage>&#x2013;<lpage>646</lpage>, <year>2015</year>.</mixed-citation></ref>
<ref id="c19"><label>[19]</label><mixed-citation publication-type="other"><string-name><given-names>N. v.</given-names> <surname>Thenen</surname></string-name>, <string-name><given-names>E.</given-names> <surname>Ayday</surname></string-name>, and <string-name><given-names>A. E.</given-names> <surname>Cicek.</surname></string-name> <article-title>Re-Identification of Individuals in Genomic Data-Sharing Beacons via Allele Inference</article-title>. <source>bioRxiv</source>, page <fpage>200147</fpage>, <year>2017</year>.</mixed-citation></ref>
<ref id="c20"><label>[20]</label><mixed-citation publication-type="confproc"><string-name><given-names>X. S.</given-names> <surname>Wang</surname></string-name>, <string-name><given-names>Y.</given-names> <surname>Huang</surname></string-name>, <string-name><given-names>Y.</given-names> <surname>Zhao</surname></string-name>, <string-name><given-names>H.</given-names> <surname>Tang</surname></string-name>, <string-name><given-names>X.</given-names> <surname>Wang</surname></string-name>, and <string-name><given-names>D.</given-names> <surname>Bu.</surname></string-name> <source>Efficient Genome-Wide, Privacy-Preserving Similar Patient Query Based on Private Edit Distance</source>. <conf-name>In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security</conf-name>, pages <fpage>492</fpage>&#x2013;<lpage>503</lpage>, <year>2015</year>.</mixed-citation></ref>
</ref-list>
</back>
</article>